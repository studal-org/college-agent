// @strict-types
#Если Сервер Тогда

#Область ПрограммныйИнтерфейс

// Обработчик.
// 
// Параметры:
//	Контекст - Структура
// 
// Возвращаемое значение:
//	HTTPСервисОтвет
Функция Обработчик(Контекст) Экспорт
	Параметры = Параметры(оас_Контекст.Параметры(Контекст));
	
	ФизическоеЛицо = stdl_ФизическиеЛица.Получить(Новый УникальныйИдентификатор(Параметры.id));

	Если ФизическоеЛицо = Неопределено Тогда
		ТелоОтвета = stdl_Ошибки.ReferenceNotFound("Individual with provided ID was not found.", "individual");
		Возврат Ответ_404_application_json(ТелоОтвета);
	КонецЕсли;
	
	Администратор = stdl_Администраторы.ПолчитьПоФизическомуЛицу(ФизическоеЛицо);
	
	Если Администратор = Неопределено Тогда
		ТелоОтвета = stdl_Ошибки.NotFound("This Individual is not an Administrator.");
		Возврат Ответ_404_application_json(ТелоОтвета);
	КонецЕсли;
	
	ТелоОтвета = stdl_Модели.Administrator(Администратор);
	
	Возврат Ответ_200_application_json(ТелоОтвета);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//	Параметры - Соответствие из КлючИЗначение -:
//		*Ключ - Произвольный
//		*Значение - Произвольный
// Возвращаемое значение:
//	Структура:
//		*id - Строка -
Функция Параметры(Параметры)
	Результат = оас_Утилиты_КлиентСервер.ПолучитьСтруктуруИзСоответствия(Параметры);
	//@skip-check constructor-function-return-section
	Возврат Результат;
КонецФункции

#Область Ответы

// Параметры:
//	Тело - см. _Ответ_200_application_json_Определения.Ответ
//
// Возвращаемое значение:
//	HTTPСервисОтвет
Функция Ответ_200_application_json(Тело)
	КодОтвета = 200;
	Ответ = Новый HTTPСервисОтвет(КодОтвета);

	ТелоСтрокой = stdl_JSONКлиентСервер.Записать(Тело);
	Ответ.УстановитьТелоИзСтроки(ТелоСтрокой);

	Возврат Ответ;
КонецФункции
// Параметры:
//	Тело - см. _Ответ_404_application_json_Определения.Ответ_1, см. _Ответ_404_application_json_Определения.Ответ_2 -
//
// Возвращаемое значение:
//	HTTPСервисОтвет
Функция Ответ_404_application_json(Тело)
	КодОтвета = 404;
	Ответ = Новый HTTPСервисОтвет(КодОтвета);

	ТелоСтрокой = stdl_JSONКлиентСервер.Записать(Тело);
	Ответ.УстановитьТелоИзСтроки(ТелоСтрокой);

	Возврат Ответ;
КонецФункции


#КонецОбласти

#Область Определения

//@skip-check module-unused-method
// Параметры:
//	
// Возвращаемое значение:
//	Неопределено
Функция _Параметры_Определения()
	оас_Утилиты_КлиентСервер.ОшибкаТолькоДляОпределения();
	Возврат Неопределено;
КонецФункции

//@skip-check module-unused-method
// Параметры:
//	Ответ - Структура -:
//		*id - Строка -
//		*individualId - Строка -
// Возвращаемое значение:
//	Неопределено
Функция _Ответ_200_application_json_Определения(Ответ)
	оас_Утилиты_КлиентСервер.ОшибкаТолькоДляОпределения();
	Возврат Неопределено;
КонецФункции
//@skip-check module-unused-method
// Параметры:
//	Ответ_2 - Структура:
//		*code - Строка - "NotFound"
//		*message - Строка -
//	Ответ_1 - Структура:
//		*code - Строка - "ReferenceNotFound"
//		*message - Строка -
//		*referenceType - Строка -
// Возвращаемое значение:
//	Неопределено
Функция _Ответ_404_application_json_Определения(Ответ_2, Ответ_1)
	оас_Утилиты_КлиентСервер.ОшибкаТолькоДляОпределения();
	Возврат Неопределено;
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли