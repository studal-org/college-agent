// Построение автосправки по сервисам. Методы справки НЕ должны
// 	вызывать ошибок, поскольку их выполнение идет ВНЕ конструкции
// 	Попытка при построении ответов сервиса
//  
// BSLLS:NestedFunctionInParameters-off - без лишних переменных выполнение быстрее
// BSLLS:EmptyRegion-off - пустые области разрешены

#Область ПрограммныйИнтерфейс

// Возвращает ответ при ошибочном запросе
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Контекст - Структура - Собранный контекст запроса
//
// Возвращаемое значение: 
// 	HTTPСервисОтвет
//
Функция ЗапросОшибка(Запрос, Контекст) Экспорт
	
	Результат	= Неопределено;
	
	#Если Сервер Тогда 
	
		ДокументацияПоказать	= ПараметрДокументацияПоказатьУстановлен(Запрос);
		СпецификацияПолучить	= ПараметрСпецификацияПолучитьУстановлен(Запрос);
		СправкаЭто				= ДокументацияПоказать ИЛИ СпецификацияПолучить;
		Сервис					= оас_Контекст.Сервис(Контекст);
		
		ОшибкаКод		= оас_Контекст.ОшибкаКод(Контекст); 
		// BSLLS:NestedTernaryOperator-off - тернарный оператор быстрее 
		Результат		= оас_Сервис.ПротоколОтвет(?(СправкаЭто
		, 200
		, ?(ЗначениеЗаполнено(ОшибкаКод), ОшибкаКод, 400)));
		// BSLLS:NestedTernaryOperator-on
		
		Тело	= "";
		ТелоТип	= 	"text/html";
		
		Если ДокументацияПоказать Тогда
			Тело	= оас_Справка.Получить(Контекст);
		ИначеЕсли СпецификацияПолучить Тогда
			Тело	= СпецификацияПолучить(Сервис);
			ТелоТип	= "application/json";
		Иначе
			// Текст ошибки
			Тело	= ОшибкаПолучить(Запрос, Контекст);
		КонецЕсли;
		
		Результат.УстановитьТелоИзСтроки(Тело);
		Результат.Заголовки.Вставить("Content-Type", ТелоТип + "; charset=utf-8");
	#Иначе
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли 
	
	Возврат Результат;

КонецФункции // ЗапросОшибка 

// Возвращает страницу документации сервиса
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
//
// Возвращаемое значение: 
// 	HTTPСервисОтвет
//
Функция Получить(Контекст) Экспорт
	
	Результат	= Неопределено;
	
	#Если Сервер Тогда
		Результат	= ДокументацияПолучить(оас_Контекст.Сервис(Контекст));
	#Иначе 
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // Получить 

// 
// Общий интерфейс адаптеров
// 

// Возвращает параметры адаптера по-умолчанию
// 
// Параметры: 
// 
// Возвращаемое значение: 
// 	Соответствие
// 
Функция ПараметрыУмолчание() Экспорт
	
	Результат	= Новый Соответствие();
	
	Возврат Результат;
	
КонецФункции // ПараметрыУмолчание 

// Инициализация адаптера
// 
// Параметры: 
// 	Регион - Строка - Регион использования адаптеров
// 	Параметры - Соответствие - Сохраненные параметры
// 
Процедура Инициализировать(Регион, Параметры) Экспорт
	
КонецПроцедуры // Инициализировать 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Истина, если задан параметр показать документацию
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
//
// Возвращаемое значение: 
// 	Булево
//
Функция ПараметрДокументацияПоказатьУстановлен(Запрос)
	
	Возврат Запрос.ПараметрыЗапроса.Получить(ПараметрДокументацияПоказатьИмя()) = "1";
	
КонецФункции // ПараметрДокументацияПоказатьУстановлен 

// Истина, если задан параметр получить спецификацию
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
//
// Возвращаемое значение: 
// 	Булево
//
Функция ПараметрСпецификацияПолучитьУстановлен(Запрос)
	
	Возврат Запрос.ПараметрыЗапроса.Получить(ПараметрСпецификацияПолучитьИмя()) = "1";
	
КонецФункции // ПараметрСпецификацияПолучитьУстановлен 

// Возвращает страницу ошибки
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Контекст - Структура - Контекст запроса
//
// Возвращаемое значение: 
// 	Строка
//
Функция ОшибкаПолучить(Запрос, Контекст)
	
	Результат	= Неопределено;
	
	#Если Сервер Тогда
		
		Адрес	= Запрос.БазовыйURL;
		Сервис	= оас_Контекст.Сервис(Контекст);
		
		Результат	= ДокументНачало()
		+ "<b>Произошла исключительная ошибка:</b><br/>
		|" + оас_Контекст.ОшибкаТекст(Контекст) + "<br/>
		|<br/>
		|Сервис: <i>" + Запрос.БазовыйURL + "</i>"
		+ " Метод <i>" + Запрос.HTTPМетод 
		+ "</i> Ресурс <i>" + Запрос.ОтносительныйURL + "</i><br/>
		|<br/>
		|<b>Перейти</b><br/>
		|<a href=""" + Адрес + "/?showdoc=1"">Документация</a><br/>
		|<a href=""" + Адрес + "/?getspec=1"">Спецификация</a>"
		+ "&nbsp(<a href=""" + Адрес + "/?getspec=1"" download=""" + Сервис + ".json"">скачать</a>)<br/>
		|" + ДокументОкончание();
	#Иначе 
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // ОшибкаПолучить 

// Возвращает спецификацию
//
// Параметры: 
// 	Сервис - Строка - Имя сервиса по метаданным
//
// Возвращаемое значение: 
// 	Строка
//
Функция СпецификацияПолучить(Сервис)
	
	Результат	= Неопределено;
	
	#Если Сервер Тогда
		Результат	= оас_НастройкаСвойство.Спецификация(оас_Настройка.Получить(Сервис));
		Если ПустаяСтрока(Результат) Тогда
			Результат	= ДокументНачало() + "Спецификация не задана!" + ДокументОкончание();
		КонецЕсли;
	#Иначе 
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // СпецификацияПолучить 

// Возвразает документацию
//
// Параметры: 
// 	Сервис - Строка - Имя сервиса
//
// Возвращаемое значение: 
// 	Строка
//
Функция ДокументацияПолучить(Сервис)
	
	Результат	= Неопределено;
	
	#Если Сервер Тогда
		
		Результат	= СпецификацияНачало();
		Настройка	= оас_Настройка.Получить(Сервис);
		Тема		= оас_НастройкаСвойство.Тема(Настройка);
		Тема		= ?(ПустаяСтрока(Тема), "view", Тема);
		
		Спецификация	= оас_НастройкаСвойство.Спецификация(Настройка);
		// Иначе будет разрыв текста спецификации
		Спецификация	= СтрЗаменить(Спецификация, "`", "\`");
		Спецификация	= СтрЗаменить(Спецификация, "'", "\'");
		Спецификация	= СтрЗаменить(Спецификация, """", "\""");
		
		Результат	= Результат + "
		|<rapi-doc id=""thedoc"" render-style =""" + Тема + """ show-header=""false"" allow-try=""false"" "
		+ " allow-spec-file-download = ""true"""
		+ " allow-server-selection = ""false"""
		+ " allow-authentication = ""false"""
		+ " regular-font=""Open Sans"""
		+ " mono-font = ""Roboto Mono"">"
		+ "</rapi-doc>
		|<script>
		|  document.addEventListener(""DOMContentLoaded"", (event) => {
		|    let docEl = document.getElementById(""thedoc"");
		|    let strSpec = `
		|" + Спецификация + "
		|    `;	
		|    let objSpec = JSON.parse(strSpec);
		|    docEl.loadSpec(objSpec);
		|  })
		|  
		|</script>
		|";
		Результат	= Результат + ДокументОкончание();
	#Иначе 
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // ДокументацияПолучить 

// Возвращает начало HTML документа
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ДокументНачало()
	
	Возврат "<html><head><meta content=""text/html; charset=utf-8"" http-equiv=Content-Type></meta></head>
	|<body>";
	
КонецФункции // ДокументНачало 

// Возвращает начало спецификации
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СпецификацияНачало()
	
	// BSLLS:Typo-off - срабатывает на префикс оас_
	Чтение	= Новый ЧтениеДанных(ПолучитьОбщийМакет("оас_rapidoc_min_js"));
	// BSLLS:Typo-on
	
	Результат	= "<!doctype html>
	|<head>
	|<!-- Global site tag (gtag.js) - Google Analytics -->
	|<meta charset=""utf-8"">
	|<meta name=""viewport"" content=""width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"">
	|<link href=""https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;600&family=Roboto+Mono&display=swap"" rel=""stylesheet"">
	|<script type=""text/javascript"">
	|" + Чтение.ПрочитатьСимволы( , КодировкаТекста.UTF8) + "
	|</script>
	|<style>
	|  rapi-doc{
	|    width:100%;
	|  }
	|</style>
	|</head>
	|<body>
	|";
	
	Чтение.Закрыть();
	
	Возврат Результат;
	
КонецФункции // СпецификацияНачало 

// Возвращает окночание документа
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ДокументОкончание()
	
	Возврат "</body></html>";
	
КонецФункции // ДокументОкончание 

// Возвращает имя параметра showdoc
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ПараметрДокументацияПоказатьИмя()
	
	Возврат "showdoc";
	
КонецФункции // ПараметрДокументацияПоказатьИмя 

// Возвращает имя параметра getspec
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ПараметрСпецификацияПолучитьИмя()
	
	Возврат "getspec";
	
КонецФункции // ПараметрСпецификацияПолучитьИмя 

#КонецОбласти

// BSLLS:EmptyRegion-on 
// BSLLS:NestedFunctionInParameters-on
