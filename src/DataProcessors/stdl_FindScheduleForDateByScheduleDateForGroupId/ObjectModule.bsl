// @strict-types
#Если Сервер Тогда

#Область ПрограммныйИнтерфейс

// Обработчик.
// 
// Параметры:
//	Контекст - Структура
// 
// Возвращаемое значение:
//	HTTPСервисОтвет
Функция Обработчик(Контекст) Экспорт
	Параметры = Параметры(оас_Контекст.Параметры(Контекст));
	
	УчебнаяГруппа = stdl_УчебныеГруппы.Получить(Новый УникальныйИдентификатор(Параметры.groupId));

	Если УчебнаяГруппа = Неопределено Тогда
		ТелоОтвета = stdl_Ошибки.ReferenceNotFound("Group with provided ID was not found.", "group");
		Возврат Ответ_404_application_json(ТелоОтвета);
	КонецЕсли;
	
	ДатаРасписания = ПрочитатьДатуJSON(Параметры.scheduleDate, ФорматДатыJSON.ISO);
	РасписаниеНаДату = stdl_РасписаниеНаДату.ПолучитьПоДатеРасписания(ДатаРасписания);
	
	Если РасписаниеНаДату = Неопределено Тогда
		ТелоОтвета = stdl_Ошибки.NotFound("ScheduleForDate for specified scheduleDate was not found.");
		Возврат Ответ_404_application_json(ТелоОтвета);
	КонецЕсли;
	
	ТелоОтвета = stdl_Модели.ScheduleForDate(РасписаниеНаДату);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасписаниеНаДатуРасписание.НомерСтроки,
		|	РасписаниеНаДатуРасписание.УчебнаяГруппа,
		|	РасписаниеНаДатуРасписание.Подгруппа,
		|	РасписаниеНаДатуРасписание.НомерПары,
		|	РасписаниеНаДатуРасписание.Дисциплина,
		|	РасписаниеНаДатуРасписание.Преподаватель,
		|	РасписаниеНаДатуРасписание.Аудитория,
		|	РасписаниеНаДатуРасписание.ВидНагрузки
		|ИЗ
		|	Документ.РасписаниеНаДату.Расписание КАК РасписаниеНаДатуРасписание
		|ГДЕ
		|	РасписаниеНаДатуРасписание.УчебнаяГруппа = &УчебнаяГруппа
		|	И РасписаниеНаДатуРасписание.Ссылка = &РасписаниеНаДату";
	
	Запрос.УстановитьПараметр("УчебнаяГруппа", УчебнаяГруппа);
	Запрос.УстановитьПараметр("РасписаниеНаДату", РасписаниеНаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Schedule = Новый Массив; // Массив из см. stdl_Модели.Period
	
	ДисциплинаКНаименованию = stdl_СоответствияНаименований.ДисциплинаКНаименованию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Period = stdl_Модели.Period(ВыборкаДетальныеЗаписи, ДисциплинаКНаименованию);
		//@skip-check property-return-type
		Period.Вставить("number", ВыборкаДетальныеЗаписи.НомерСтроки);
		Schedule.Добавить(Period);
	КонецЦикла;
	
	ТелоОтвета.Вставить("schedule", Schedule);
	
	Возврат Ответ_200_application_json(ТелоОтвета);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//	Параметры - Соответствие из КлючИЗначение -:
//		*Ключ - Произвольный
//		*Значение - Произвольный
// Возвращаемое значение:
//	Структура:
//		*groupId - Строка -
//		*scheduleDate - Строка -
Функция Параметры(Параметры)
	Результат = оас_Утилиты_КлиентСервер.ПолучитьСтруктуруИзСоответствия(Параметры);
	//@skip-check constructor-function-return-section
	Возврат Результат;
КонецФункции

#Область Ответы

// Параметры:
//	Тело - см. _Ответ_200_application_json_Определения.Ответ
//
// Возвращаемое значение:
//	HTTPСервисОтвет
Функция Ответ_200_application_json(Тело)
	КодОтвета = 200;
	Ответ = Новый HTTPСервисОтвет(КодОтвета);

	ТелоСтрокой = stdl_JSONКлиентСервер.Записать(Тело);
	Ответ.УстановитьТелоИзСтроки(ТелоСтрокой);

	Возврат Ответ;
КонецФункции
// Параметры:
//	Тело - см. _Ответ_404_application_json_Определения.Ответ_1, см. _Ответ_404_application_json_Определения.Ответ_2 -
//
// Возвращаемое значение:
//	HTTPСервисОтвет
Функция Ответ_404_application_json(Тело)
	КодОтвета = 404;
	Ответ = Новый HTTPСервисОтвет(КодОтвета);

	ТелоСтрокой = stdl_JSONКлиентСервер.Записать(Тело);
	Ответ.УстановитьТелоИзСтроки(ТелоСтрокой);

	Возврат Ответ;
КонецФункции


#КонецОбласти

#Область Определения

//@skip-check module-unused-method
// Возвращаемое значение:
//	Неопределено
Функция _Параметры_Определения()
	оас_Утилиты_КлиентСервер.ОшибкаТолькоДляОпределения();
	Возврат Неопределено;
КонецФункции

//@skip-check module-unused-method
// Параметры:
//	Ответ - Структура -:
//		*id - Строка -
//		*scheduleDate - Строка -
//		*periodScheduleId - Неопределено, Строка -
//		*schedule - Массив из см. _Ответ_200_application_json_Определения.Ответ_schedule_Элемент - -
//	Ответ_schedule_Элемент - Структура -:
//		*number - Число -
//		*groupId - Неопределено, Строка -
//		*subgroup - Неопределено, Число -
//		*workTypeId - Неопределено, Строка -
//		*periodNumber - Неопределено, Число -
//		*discipline - Неопределено, см. _Ответ_200_application_json_Определения.Ответ_schedule_Элемент_discipline -
//		*teacherId - Неопределено, Строка -
//		*classroomId - Неопределено, Строка -
//	Ответ_schedule_Элемент_discipline - Структура -:
//		*objectType - Строка - "discipline" | "practiceKind" | 
//		*objectId - Строка -
// Возвращаемое значение:
//	Неопределено
Функция _Ответ_200_application_json_Определения(Ответ, Ответ_schedule_Элемент, Ответ_schedule_Элемент_discipline)
	оас_Утилиты_КлиентСервер.ОшибкаТолькоДляОпределения();
	Возврат Неопределено;
КонецФункции
//@skip-check module-unused-method
// Параметры:
//	Ответ_2 - Структура:
//		*code - Строка - "NotFound"
//		*message - Строка -
//	Ответ_1 - Структура:
//		*code - Строка - "ReferenceNotFound"
//		*message - Строка -
//		*referenceType - Строка -
// Возвращаемое значение:
//	Неопределено
Функция _Ответ_404_application_json_Определения(Ответ_2, Ответ_1)
	оас_Утилиты_КлиентСервер.ОшибкаТолькоДляОпределения();
	Возврат Неопределено;
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли