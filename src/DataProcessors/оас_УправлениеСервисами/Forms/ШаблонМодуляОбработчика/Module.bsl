
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Предопределенный метод
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// BSLLS:MissingParameterDescription-on 
	
	Сервис			= Параметры.Сервис;
	Ресурс			= Параметры.Ресурс;
	Метод			= Параметры.Метод;
	ОбработчикМетод	= Параметры.ОбработчикМетод;
	
	ОшибкаТекст		= "";
	
	// BSLLS:IfConditionComplexity-off - условие тривиально
	Если ПустаяСтрока(Сервис) ИЛИ ПустаяСтрока(Ресурс) ИЛИ ПустаяСтрока(Метод) Тогда
		ОшибкаТекст	= НСтр("ru = 'Неверный вызов формы!'");
	КонецЕсли;
	// BSLLS:IfConditionComplexity-on
	
	Если ПустаяСтрока(ОшибкаТекст) Тогда
		Заголовок	= "Сервис " + Сервис + ", метод " + Метод + ", ресурс " + Ресурс;
		Модуль		= "<html><head><meta content=""text/html; charset=utf-8"" http-equiv=Content-Type></meta></head>
		|<body>" + оас_ВстроенныйЯзык.ТекстВHTML(МодульНаСервере(Сервис
		, Ресурс
		, Метод
		, ОбработчикМетод)
		, оас_ВстроенныйЯзык.ЦветоваяСхемаСтандартная())
		+ "</body></html>";
	Иначе
		Отказ		= Истина;
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = ОшибкаТекст;
		Сообщение.Сообщить(); 
	КонецЕсли;
	
КонецПроцедуры

// Предопределенный метод
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// BSLLS:MissingParameterDescription-on 
	
	Документ	= Модуль;
	Элементы.Документ.Вперед();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Возвращает модуль обработки
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Ресурс - Строка - Имя ресурса сервиса
// 	Метод - Строка - Имя метода сервиса
// 	ОбработчикМетод - Строка - Имя метода обработчика
//
// Возвращаемое значение: 
// 	Строка
&НаСервереБезКонтекста
Функция МодульНаСервере(Сервис, Ресурс, Метод, ОбработчикМетод)	
	Настройка = оас_Настройка.Получить(Сервис);
	
	Спецификация = оас_Спецификация_1.ДесериализироватьСпецификацию(оас_НастройкаСвойство.Спецификация(Настройка));
	Спецификация = оас_Спецификация_1.ЗаменитьСсылкиЗначениями(Спецификация);
	
	Результат = оас_Шаблон.ГенерироватьТекстМодуляОбработчика(Спецификация, Ресурс, НРег(Метод));
	
	Возврат Результат;
КонецФункции // МодульНаСервере 

// Возвращает модуль обработки
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Ресурс - Строка - Имя ресурса сервиса
// 	Метод - Строка - Имя метода сервиса
// 	ОбработчикМетод - Строка - Имя метода обработчика
//
// Возвращаемое значение: 
// 	Строка
&НаСервереБезКонтекста
Функция МодульНаСервереСтарый(Сервис, Ресурс, Метод, ОбработчикМетод)
	Результат	= ШаблонНаСервере();
	
	Результат	= СтрЗаменить(Результат, "{Сервис}", Сервис);
	Результат	= СтрЗаменить(Результат, "{Ресурс}", Ресурс);
	Результат	= СтрЗаменить(Результат, "{Метод}", Метод);
	
	ПараметрыТекст	= "";
	ПеременныеТекст	= "";
	ТелоТекст		= "";
	ОтветТекст		= "";
	
	Настройка			= оас_Настройка.Получить(Сервис);
	НастройкаМетод		= Настройка.Получить("Ресурсы").Получить(Ресурс)
	.Получить("Методы").Получить(Метод);
	НастройкаПараметры	= НастройкаМетод.Получить("Параметры");
	Спецификация		= оас_Спецификация.Десериализовать(оас_НастройкаСвойство.Спецификация(Настройка));
	СпецификацияРесурс	= оас_Спецификация.СсылкиРазыменовать(Спецификация).Получить("paths").Получить(Ресурс);
	СпецификацияМетод	= СпецификацияРесурс.Получить(НРег(Метод));
	СпецификацияТело	= СпецификацияМетод.Получить("requestBody");
	СпецификацияОтвет	= СпецификацияМетод.Получить("responses");
	Представления		= ПараметрыПредставленияНаСервере(СпецификацияРесурс, Метод);
	оас_Модуль.ом_Коллекция().СоответствиеДополнить(Представления
	, ПараметрыПредставленияНаСервере(СпецификацияМетод, Метод)
	, Ложь);
	
	// Параметры
	Для Каждого Параметр Из НастройкаПараметры Цикл
		Описание		= Параметр.Значение;
		Имя				= оас_Параметр.Имя(Описание);
		Представление	= Строка(Представления.Получить(Имя));
		// BSLLS:Typo-off - ложное срабатывание
		ПараметрыТекст	= ПараметрыТекст + "
		|//	" + Имя + " - " 
		+ ?(оас_Параметр.ЧислоЭто(Описание), "Число", "Строка")
		+ " - " + ?(оас_Параметр.Обязательный(Описание), "О", "Нео") + "бязательный, " + Представление;
		// BSLLS:Typo-on
		ПеременныеТекст	= ПеременныеТекст + "
		|		_" + Имя + " = Параметры.Получить(""" + Имя + """);";
	КонецЦикла;
	Если НЕ ПустаяСтрока(ПеременныеТекст) Тогда
		ПеременныеТекст	= "// Разворачиваем параметры в локальные переменные 
		|		Параметры	= оас_Контекст.Параметры(Контекст); " + ПеременныеТекст;
	Иначе
		ПеременныеТекст	= "// Параметры в спецификации не заявлены";
	КонецЕсли;
	
	// Тело запроса
	НастройкаТело	= НастройкаМетод.Получить("Тело");
	ТелоТекст		= ТелоТекст + ?(оас_Тело.ДвоичныеДанныеЭто(НастройкаТело) = Истина
	, "ДвоичныеДанные"
	, "Текст");
	ТелоТекст		= ТелоТекст + ", " + ?(оас_Тело.Обязательный(НастройкаТело), "", "не")
	+ "обязательное";
	Если СпецификацияТело <> Неопределено Тогда
		ТелоТекст	= ТелоТекст + СпецификацияСериализоватьНаСервере(СпецификацияТело.Получить("content")
		, "// Схема тела запроса:"
		, Символы.Таб);
	КонецЕсли;
	ОтветТекст	= СпецификацияСериализоватьНаСервере(СпецификацияОтвет
	, "// Схема ответа:"
	, Символы.Таб);
	
	Результат	= СтрЗаменить(Результат, "{ОбработчикМетод}"
	, ?(ПустаяСтрока(ОбработчикМетод), "Ответ", ОбработчикМетод));
	Результат	= СтрЗаменить(Результат, "{ТипТела}", ТелоТекст);
	Результат	= СтрЗаменить(Результат, "{СхемаОтвета}", ОтветТекст);
	Результат	= СтрЗаменить(Результат, "{Параметры}", ПараметрыТекст);
	Результат	= СтрЗаменить(Результат, "// {ЛокальныеПеременные}", ПеременныеТекст);
	
	Возврат Результат;
КонецФункции

// Возвращает текст спецификации комментарием 1С кода
//
// Параметры: 
// 	Спецификация - Соответствие - Спецификация сервиса
// 	Заголовок - Строка - Заголовок к спецификации
// 	Отступ - Строка - Базовый отступ
//
// Возвращаемое значение: 
// 	Строка
//
// BSLLS:Typo-off - ложное срабатывание на Сериализовать
&НаСервереБезКонтекста 
Функция СпецификацияСериализоватьНаСервере(Спецификация, Заголовок, Отступ)
	
	// BSLLS:Typo-on
	Результат	= "";
	
	Если Спецификация <> Неопределено Тогда
		Результат	= Результат + "
		|" + Заголовок;
		Текст		= оас_Спецификация.Сериализовать(Спецификация);
		Количество	= СтрЧислоСтрок(Текст);
		Для СтрокаНомер = 1 По Количество Цикл
			Результат	= Результат + "
			|//" + Отступ + СтрПолучитьСтроку(Текст, СтрокаНомер);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СпецификацияСериализоватьНаСервере 

// Возвращает коллекцию параметров метода
//
// Параметры: 
// 	Правила - Соответствие - Правила спецификации
// 	Метод - Строка - Имя HTTP метода
//
// Возвращаемое значение: 
// 	Соответствие
//
&НаСервереБезКонтекста 
Функция ПараметрыПредставленияНаСервере(Правила, Метод)
	
	Результат	= Новый Соответствие();
	
	Набор	= Правила.Получить("parameters");
	Если оас_Модуль.ом_Значение().МассивЭто(Набор) Тогда
		Для Каждого Элемент Из Правила.Получить("parameters") Цикл
			Результат.Вставить(Элемент.Получить("name"), Элемент.Получить("description"));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПараметрыПредставленияНаСервере 

// Возвращает шаблон модуля
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
&НаСервереБезКонтекста 
Функция ШаблонНаСервере()
	
	Возврат "// Обработчик запросов метода {Метод} ресурса {Ресурс}
	|//	сервиса {Сервис}
	|// 
	|// В метод передается структура контекста входящего запроса (см. оас_Контекст), содержащая 
	|// 	Сервис - Строка - БазовыйURL запроса, равен КорневойURL сервиса
	|// 	Метод - Строка - HTTPМетод
	|// 	Ресурс - Строка - ОтносительныйURL запроса
	|// 	Точка - Строка - Ресурс спецификации (user/{username}, /order/{orderId}/update)
	|// 	Параметры - Соответствие - полученные по спецификации параметры
	|// 		<Ключ> - Строка - имя параметра
	|// 		Значение - Строка, Число - значение параметра
	|// 	Тело - Строка, ДвоичныеДанные - полученное по спецификации тело запроса
	|// 	Обработчик - Соответствие - полное имя и вызываемы метод обработчика ресурса по настройкам
	|// 		Имя - Строка - полное имя обработки
	|// 		Метод - Строка - имя вызываемого метода
	|// 
	|// BSLLS:NestedFunctionInParameters-off - без лишних переменных выполнение быстрее
	|// BSLLS:EmptyRegion-off - пустые области разрешены
	|
	|#Область ОписаниеПеременных
	|
	|#КонецОбласти
	|
	|
	|#Область ПрограммныйИнтерфейс
	|
	|// Возвращает ответ по запросу {Метод} ресурса {Ресурс}
	|//	сервиса {Сервис}
	|//
	|// Параметры: {Параметры}
	|// 
	|// Тело запроса:
	|//	{ТипТела}
	|//
	|// Возвращаемое значение: 
	|//	HTTPСервисОтвет {СхемаОтвета}
	|//
	|Функция {ОбработчикМетод}(Контекст) Экспорт
	|	
	|	Результат	= Неопределено;
	|	
	|	// Допустимы вызовы ТОЛЬКО в серверном контексте
	|	#Если Сервер Тогда
	|	
	|		Результат	= оас_Сервис.ПротоколОтвет(200);
	|		Тело		= оас_Контекст.Тело(Контекст);
	|		// {ЛокальныеПеременные}
	|		
	|		//
	|		// Тело обработчика
	|		// 
	|		
	|		// При возникновении ошибки сигнализируем об этом
	|		оас_Контекст.ОшибкаУстановить(Контекст
	|		, НСтр(""ru = 'Обработка "" + Метаданные().ПолноеИмя() + "": не реализован обработчик сервиса "" 
	|		+ оас_Контекст.Сервис(Контекст) + "" метод "" + оас_Контекст.Метод(Контекст) 
	|		+ "" ресурс "" + оас_Контекст.Ресурс(Контекст) + ""!'""));
	|		
	|	#Иначе
	|		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	|	#КонецЕсли
	|	
	|	Возврат Результат;
	|	
	|КонецФункции // {ОбработчикМетод} 
	|
	|#КонецОбласти
	|
	|
	|#Область СлужебныеПроцедурыИФункции
	|
	|#КонецОбласти
	|
	|// BSLLS:EmptyRegion-on
	|// BSLLS:NestedFunctionInParameters-on
	|";
	
КонецФункции // ШаблонНаСервере 

#КонецОбласти
