
#Область ОписаниеПеременных

// Локальный кэш. Обращение через методы
// 
&НаКлиенте
Перем _b0b94d3fd4e44958a5577f330a30c747;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Предопределенный метод
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// BSLLS:MissingParameterDescription-on 
	
	ТолькоПросмотр	= НЕ оас_Настройка.АдминистрированиеДоступно();
	ОбработкаИмя	= ОбработкаИмяПолучитьНаСервере(ЭтотОбъект);
	
	СервисВыборЗаполнитьНаСервере(Элементы.Сервис.СписокВыбора);
	
КонецПроцедуры

// Предопределенный метод
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// BSLLS:MissingParameterDescription-on 
	
	// Инициализируем локальный кэш. Дальнейшее обращение к нему через Кэш()
	_b0b94d3fd4e44958a5577f330a30c747	= Новый Соответствие();
	
	ЭлементыПараметрыУстановить();
	
КонецПроцедуры

// Предопределенный метод
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// BSLLS:MissingParameterDescription-on 
	
	Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("ПередЗакрытиемДиалогЗаписатьЗавершение", ЭтотОбъект);
	оас_Модуль.ом_ДиалогКлиент().ДанныеЗаписатьПередЗакрытием(ЭтотОбъект
	, Оповещение
	, Отказ
	, ЗавершениеРаботы
	, ТекстПредупреждения
	, СтандартнаяОбработка);
	
КонецПроцедуры

// Завершение диалога Записать перед закрыитем формы
//
// Параметры: 
// 	Результат - КодВозвратаДиалога - Результат диалога
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция ПередЗакрытиемДиалогЗаписатьЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	ФормаЗакрыть	= Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДанныеЗаписать();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		ФормаЗакрыть	= Ложь;
	Иначе
		Модифицированность	= Ложь;
	КонецЕсли;
	
	Если ФормаЗакрыть Тогда
		Закрыть();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПередЗакрытиемДиалогЗаписатьЗавершение 

#КонецОбласти

#Область ОбработчикиКомандФормы

// По команде Записать и закрыть
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Неопределено);
	Закрыть();
	
КонецПроцедуры

// По команде Записать
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура Записать(Команда)
	
	ДанныеЗаписать();
	
КонецПроцедуры

// По команде Сохранить спецификацию
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура СпецификацияСохранить(Команда)
	
	ОшибкаТекст	= "";
	Если ПустаяСтрока(Сервис) Тогда
		ОшибкаТекст	= НСтр("ru = 'Не выбран сервис.'");
	ИначеЕсли КэшНастройка() = Неопределено Тогда
		ОшибкаТекст	= НСтр("ru = 'Отсутствуют настройки.'");
	ИначеЕсли НЕ оас_Модуль.ом_Значение().ХранилищеЗначенияЭто(КэшНастройка().Получить("Спецификация")) Тогда
		ОшибкаТекст	= НСтр("ru = 'Настройка сервиса не содержит спецификацию.'");
	Иначе
		ОшибкаТекст	= "";
	КонецЕсли;
	
	Если ПустаяСтрока(ОшибкаТекст) Тогда
		Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("СпецификацияСохранитьФайлВыборЗавершение"
		, ЭтотОбъект
		, ХранилищеЗначениеНаСервере(КэшНастройка().Получить("Спецификация")));
		оас_Модуль.ом_ДиалогКлиент().ФайлВыборДиалогОткрыть(Оповещение
		, ФайлJSONВыборДиалог(РежимДиалогаВыбораФайла.Сохранение));
	Иначе
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = ОшибкаТекст;
		Сообщение.Сообщить(); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора файла сохранения спецификации
//
// Параметры: 
// 	Результат - Массив - Выбранные файлы
// 	Текст - Строка - Переданный сохраняемый текст
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция СпецификацияСохранитьФайлВыборЗавершение(Результат, Текст) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекстЗаписать(Результат[0], Текст);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СпецификацияСохранитьФайлВыборЗавершение 

// По команде Загрузить спецификацию
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура СпецификацияЗагрузить(Команда)
	
	Если ПустаяСтрока(Сервис) Тогда
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо выбрать сервис.'");
		Сообщение.Сообщить(); 
	Иначе
		оас_Модуль.ом_ДиалогКлиент().ФайлВыборДиалогОткрыть(оас_Модуль.ом_ДиалогКлиент()
		.ОписаниеОповещения("СпецификацияЗагрузитьФайлВыборЗавершение", ЭтотОбъект)
		, ФайлJSONВыборДиалог(РежимДиалогаВыбораФайла.Открытие));
	КонецЕсли;
		
КонецПроцедуры

// Завершение выбора файла спецификации
//
// Параметры: 
// 	Результат - Массив - Выбранные файлы
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
//
&НаКлиенте 
Функция СпецификацияЗагрузитьФайлВыборЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Оповещение	= оас_Модуль.ом_ДиалогКлиент()
		.ОписаниеОповещения("СпецификацияЗагрузитьФайлЧтениеЗавершение", ЭтотОбъект);
		ТекстПрочитать(Результат[0], Оповещение);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СпецификацияЗагрузитьФайлВыборЗавершение 

// Завершение чтения файла спецификации
//
// Параметры: 
// 	Текст - Строка - Текст файла
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция СпецификацияЗагрузитьФайлЧтениеЗавершение(Текст, ОповещениеПараметры) Экспорт
	
	// Предварительно сохраняем текущие обработчики
	Обработчики	= ОбработчикиКоллекция(РесурсыТаблица);
	НастройкаПриИзменении(НастройкаСоздатьНаСервере(Текст));
	РесурсыТаблицаОбработчикиЗаполнить(РесурсыТаблица, Обработчики);
	Модифицированность	= Истина;
	
	Возврат Неопределено;
	
КонецФункции // СпецификацияЗагрузитьФайлЧтениеЗавершение 

// По команде Открыть форму шаблона модуля обработчика запроса
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура ОбработчикШаблон(Команда)
	
	ДанныеТекущие	= Элементы.РесурсыТаблица.ТекущиеДанные;
	ОшибкаТекст		= "";
	
	Если ДанныеТекущие = Неопределено Тогда
		ОшибкаТекст	= НСтр("ru = 'Необходимо выбрать конечную точку.'");
	КонецЕсли;
	Если ПустаяСтрока(ОшибкаТекст) Тогда
		ФормаПараметры	= Новый Структура();
		ФормаПараметры.Вставить("Сервис", Сервис);
		ФормаПараметры.Вставить("Метод", ДанныеТекущие.Метод);
		ФормаПараметры.Вставить("Ресурс", ДанныеТекущие.Ресурс);
		ФормаПараметры.Вставить("ОбработчикИмя", ДанныеТекущие.ОбработчикИмя);
		ФормаПараметры.Вставить("ОбработчикМетод", ДанныеТекущие.ОбработчикМетод);
		ФормаПараметры.Вставить("Идентификатор", ДанныеТекущие.Идентификатор);
		Оповещение		= оас_Модуль.ом_ДиалогКлиент()
		.ОписаниеОповещения("ОбработчикШаблонЗаписьВопросЗавершение", ЭтотОбъект, ФормаПараметры);
		оас_Модуль.ом_ДиалогКлиент().ДанныеЗаписатьПредварительно(ЭтотОбъект
		, Оповещение
		, РежимДиалогаВопрос.ДаНет);
	Иначе
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = ОшибкаТекст;
		Сообщение.Сообщить(); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение вопроса о предварительной записи данных перед открытием шаблона обработчика
//
// Параметры: 
// 	Результат - КодВозвратаДиалога - РезультатДиалога
// 	ФормаПараметры - Структура - Параметры открываемой формы
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция ОбработчикШаблонЗаписьВопросЗавершение(Результат, ФормаПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДанныеЗаписать();
	КонецЕсли;
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		// BSLLS:IncorrectLineBreak-off - ложное срабатывание
		оас_Модуль.ом_ДиалогКлиент().ФормаОткрыть(ОбработкаИмя + ".Форма.ШаблонМодуляОбработчика"
		, 
		, ФормаПараметры
		, ЭтотОбъект
		, Строка(ЭтотОбъект.УникальныйИдентификатор) 
		+ ФормаПараметры.Сервис 
		+ ФормаПараметры.Идентификатор);
		// BSLLS:IncorrectLineBreak-on
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ОбработчикШаблонЗаписьВопросЗавершение 

// По команде Сохранить настройки
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура НастройкаСохранить(Команда)
	
	Настройка	= КэшНастройка();
	Если Настройка = Неопределено Тогда
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Настройка пуста!'");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	Оповещение	= оас_Модуль.ом_ДиалогКлиент()
	.ОписаниеОповещения("НастройкаСохранитьДанныеЗаписатьДиалогЗавершение", ЭтотОбъект);
	оас_Модуль.ом_ДиалогКлиент().ДанныеЗаписатьПредварительно(ЭтотОбъект, Оповещение);
	
КонецПроцедуры

// Завершение диалога сохранения модифицированных данных при сохранении настроек
//
// Параметры: 
// 	Результат - КодВозвратаДиалога - Результат диалога
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение:
// 	Неопределено
// 
&НаКлиенте 
Функция НастройкаСохранитьДанныеЗаписатьДиалогЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		Если Результат = КодВозвратаДиалога.ОК Тогда
			ДанныеЗаписать();
		КонецЕсли;
		Настройка	= КэшНастройка();
		Диалог		= ФайлJSONВыборДиалог(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.ПолноеИмяФайла	= Сервис;
		Оповещение	= оас_Модуль.ом_ДиалогКлиент()
		.ОписаниеОповещения("НастройкаСохранитьФайлВыборЗавершение", ЭтотОбъект, Настройка);
		оас_Модуль.ом_ДиалогКлиент().ФайлВыборДиалогОткрыть(Оповещение, Диалог);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НастройкаСохранитьДанныеЗаписатьДиалогЗавершение 

// Завершения выбора файла сохранения настроек
//
// Параметры: 
// 	Результат - Массив - Выбранные файлы
// 	Настройка - Соответствие - Сохраняемая настройка
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция НастройкаСохранитьФайлВыборЗавершение(Результат, Настройка) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекстЗаписать(Результат[0], НастройкаСериализоватьНаСервере(Настройка));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НастройкаСохранитьФайлВыборЗавершение 

// По команде Загрузить настройки
// 
// Параметры:
//	Команда - КомандаФормы - Вызывающая команда
// 
&НаКлиенте
Процедура НастройкаЗагрузить(Команда)
	
	Если КэшНастройка() = Неопределено Тогда
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Спецификация не задана!'");
		Сообщение.Сообщить(); 
	КонецЕсли;
	
	Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("НастройкаЗагрузитьВопросЗавершение", ЭтотОбъект);
	
	оас_Модуль.ом_ДиалогКлиент().ВопросПоказать(Оповещение
	, НСтр("ru = 'При загрузке текущие настройки обработчиков будут заменены. Продолжить?'")
	, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Завершение вопроса о потере текущих настроек при загрузке
//
// Параметры: 
// 	Результат - КодВозвратаДиалога - Результат диалога
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция НастройкаЗагрузитьВопросЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("НастройкаЗагрузитьФайлВыборЗавершение", ЭтотОбъект);
		оас_Модуль.ом_ДиалогКлиент()
		.ФайлВыборДиалогОткрыть(Оповещение, ФайлJSONВыборДиалог(РежимДиалогаВыбораФайла.Открытие));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НастройкаЗагрузитьВопросЗавершение 

// При завершении выбора загружаемого файла настроек
//
// Параметры: 
// 	Результат - Массив - Результат выбора
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция НастройкаЗагрузитьФайлВыборЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Оповещение	= оас_Модуль.ом_ДиалогКлиент()
		.ОписаниеОповещения("НастройкаЗагрузитьФайлЧтениеЗавершение", ЭтотОбъект);
		ТекстПрочитать(Результат[0], Оповещение);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НастройкаЗагрузитьФайлВыборЗавершение 

// Завершение чтения файла настроек
//
// Параметры: 
// 	Результат - Строка - Текст файла
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция НастройкаЗагрузитьФайлЧтениеЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	Правила		= НастройкаДесериализоватьНаСервере(Результат);
	Если Правила <> Неопределено Тогда
		Правила		= оас_Модуль.ом_Коллекция().ОбычнаяВФиксированная(Правила);
		Настройка	= Новый Соответствие(КэшНастройка());
		Настройка.Вставить("Обработчики", Правила.Получить("Обработчики"));
		Настройка.Вставить("Тема", Правила.Получить("Тема"));
		КэшНастройка(Новый ФиксированноеСоответствие(Настройка));
		ТемаЗаполнить(Настройка);
		СобытияОбработчикиЗаполнить(Настройка);
		РесурсыТаблицаОбработчикиЗаполнить(РесурсыТаблица, Настройка.Получить("Обработчики"));
		ЭлементыПараметрыУстановить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НастройкаЗагрузитьФайлЧтениеЗавершение 

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

// При начале выбора сервиса. Обеспечиваем предварительную запись
// 	измененных данных при начале выбора
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура СервисНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// BSLLS:MissingParameterDescription-on 
	
	СтандартнаяОбработка	= Ложь;
	
	оас_Модуль.ом_ДиалогКлиент().ДанныеЗаписать(ЭтотОбъект
	, оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("СервисНачалоВыбораДиалогЗаписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Завершение возможного диалога записи при выборе сервиса
//
// Параметры: 
// 	Результат - КодВозвратаДиалога - Результат вопроса сохранения
// 	ОповещениеПараметры - Произвольный - Не используется
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция СервисНачалоВыбораДиалогЗаписатьЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	ВыборПродолжить	= Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДанныеЗаписать();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		ВыборПродолжить	= Ложь;
	Иначе
		ВыборПродолжить	= Истина;
	КонецЕсли;
	
	Если ВыборПродолжить Тогда
		Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("СервисВыборЗавершение", ЭтотОбъект);
		оас_Модуль.ом_ДиалогКлиент().СписокЭлементВыбрать(Оповещение
		, Элементы.Сервис.СписокВыбора);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СервисНачалоВыбораДиалогЗаписатьЗавершение 

// Завершение выбора сервиса
//
// Параметры: 
// 	Результат - ЭлементСпискаЗначений - Результат выбора
//  ОповещениеПараметры - Произвольный - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция СервисВыборЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Сервис		= Результат.Значение;
		Настройка	= НастройкаПолучитьНаСервере(Сервис);
		НастройкаПриИзменении(Настройка);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СервисВыборЗавершение 

// При изменении использовании события ПередОбработкойЗапроса
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПередОбработкойЗапросаИспользоватьПриИзменении(Элемент)
	// BSLLS:MissingParameterDescription-on 
	
	ЭлементыПараметрыУстановить();
	
	Если НЕ ПередОбработкойЗапросаИспользовать Тогда
		ПередОбработкойЗапросаИмя	= Неопределено;
		ПередОбработкойЗапросаМетод	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// При изменении использовании события ПослеОбработкиЗапроса
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПослеОбработкиЗапросаИспользоватьПриИзменении(Элемент)
	// BSLLS:MissingParameterDescription-on 
	
	ЭлементыПараметрыУстановить();
	
	Если НЕ ПослеОбработкиЗапросаИспользовать Тогда
		ПослеОбработкиЗапросаИмя	= Неопределено;
		ПослеОбработкиЗапросаМетод	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Начало выбора обработчика события ПередОбработкойЗапроса
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПередОбработкойЗапросаИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// BSLLS:MissingParameterDescription-on 
	
	СтандартнаяОбработка	= Ложь;
	
	ОбработчикВыборОткрыть("СервисСобытиеОбработчикИмяВыборЗавершение"
	, НСтр("ru = 'Обработчик события ПередОбработкойЗапроса'")
	, Элементы.ПередОбработкойЗапросаИмя.Имя);
	
КонецПроцедуры

// Начало выбора обработчика события ПослеОбработкиЗапроса
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура ПослеОбработкиЗапросаИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// BSLLS:MissingParameterDescription-on 
	
	СтандартнаяОбработка	= Ложь;
	
	ОбработчикВыборОткрыть("СервисСобытиеОбработчикИмяВыборЗавершение"
	, НСтр("ru = 'Обработчик события ПослеОбработкиЗапроса'")
	, Элементы.ПослеОбработкиЗапросаИмя.Имя);
	
КонецПроцедуры

// Завершение выбора обработчика события сервиса
//
// Параметры: 
// 	Результат - Структура - Результат выбора
// 	РеквизитИмя - Строка - Имя реквизита формы
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция СервисСобытиеОбработчикИмяВыборЗавершение(Результат, РеквизитИмя) Экспорт
	
	Если Результат <> Неопределено Тогда
		Выбор	= Результат[0];
		оас_Модуль.ом_Значение().СвойствоУстановить(ЭтотОбъект, РеквизитИмя, Выбор.Имя);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // СервисСобытиеОбработчикИмяВыборЗавершение 

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыТаблица

// Перед началом изменения таблицы
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура РесурсыТаблицаПередНачаломИзменения(Элемент, Отказ)
	// BSLLS:MissingParameterDescription-on 
	
	// При попытке изменения всего кроме метода открываем 
	// диалог выбора обработчика обработчика 
	
	ДанныеТекущие	= Элемент.ТекущиеДанные;
	Если ДанныеТекущие <> Неопределено Тогда
		
		РежимДиалог	= ОбработчикиВводРежимДиалог();
		Колонка		= Элемент.ТекущийЭлемент.Имя;
		Если Колонка <> "РесурсыТаблицаОбработчикМетод" 
			И (РежимДиалог ИЛИ Колонка <> "РесурсыТаблицаОбработчикИмя") 
			Тогда
			Отказ	= Истина;
		КонецЕсли;
		
		Если Отказ И РежимДиалог Тогда
			ОбработчикВыборОткрыть("РесурсыТаблицаОбработчикВыборЗавершение"
			, НСтр("ru = 'Выберите обработчик запроса ресурса.'")
			, ДанныеТекущие.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора обработчика конечной точки
//
// Параметры: 
// 	Результат - Массив - Результат выбора
// 	СтрокаИдентификатор - Число - Идентификатор строки таблицы ресурсов
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция РесурсыТаблицаОбработчикВыборЗавершение(Результат, СтрокаИдентификатор) Экспорт
	
	Если Результат <> Неопределено Тогда
		Выбор			= Результат[0];
		РесурсыСтрока	= РесурсыТаблица.НайтиПоИдентификатору(СтрокаИдентификатор);
		РесурсыСтрока.ОбработчикИмя	= Выбор.Имя;
		РесурсыТаблицаОбработчикМетодУмолчаниеУстановить(РесурсыСтрока);
		Модифицированность	= Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // РесурсыТаблицаОбработчикВыборЗавершение 

// При изменении имени обработчика таблицы ресурсы
// 
// BSLLS:MissingParameterDescription-off - см. синтакс-помощник
&НаКлиенте
Процедура РесурсыТаблицаОбработчикИмяПриИзменении(Элемент)
	// BSLLS:MissingParameterDescription-on 
	
	ДанныеТекущие	= Элементы.РесурсыТаблица.ТекущиеДанные;
	
	Если ДанныеТекущие <> Неопределено Тогда
		РесурсыТаблицаОбработчикМетодУмолчаниеУстановить(ДанныеТекущие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сохранение настройки сервиса. Возвращает успех записи
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Настройка - ФиксированноеСоответствие - Сохраняемая настройка
// 
// Возвращаемое значение:
// 	Булево
//
&НаСервереБезКонтекста 
Функция ДанныеЗаписатьНаСервере(Сервис, Настройка)
	
	Результат	= Истина;
	
	Если Настройка <> Неопределено Тогда
		
		// Проверяем корректность вврденного
		ОшибкаТекст	= "";
		Набор		= Метаданные.Обработки;
		// BSLLS:MagicNumber-off
		Для Каждого ОбработчикЭлемент Из Настройка.Получить("Обработчики") Цикл
			Имя		= ОбработчикЭлемент.Значение.Получить("Имя");
			Части	= оас_Модуль.ом_Строка().ВМассив(Имя, ".");
			Если Части.Количество() <> 2 Тогда
				ОшибкаТекст	= НСтр("ru = 'Неверное имя обработчика " + Имя + "'");
			ИначеЕсли НЕ оас_Модуль.ом_ТипИмя().ОбработкаЭто(Части[0]) Тогда
				ОшибкаТекст	= НСтр("ru = '" + Имя + " не является обработкой.'");
			ИначеЕсли Набор.Найти(Части[1]) = Неопределено Тогда
				ОшибкаТекст	= НСтр("ru = '" + Имя + " не найдена в метаданных.'");
			Иначе
				ОшибкаТекст	= "";
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОшибкаТекст) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// BSLLS:MagicNumber-on
		
		Если ПустаяСтрока(ОшибкаТекст) Тогда
			оас_Настройка.Сохранить(Сервис, Настройка);
		Иначе
			Сообщение	= Новый СообщениеПользователю;
			Сообщение.Текст = ОшибкаТекст;
			Сообщение.Сообщить(); 
			Результат	= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДанныеЗаписатьНаСервере 

// Преобразует коды ответов к строке. В версии 0.1.4.19 допущена ошибка - в
// 	ключах ответов хранится число
//
// Параметры: 
// 	Настройка - Соответствие - Настройка сервиса
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастройкаОтветыКодыВСтрокаПреобразовать(Настройка)
	
	КлючРесурсы	= "Ресурсы";
	КлючМетоды	= "Методы";
	КлючОтвет	= "Ответ";
	
	ТипЧисло	= Тип("Строка");
	
	Ресурсы		= Новый Соответствие(Настройка.Получить(КлючРесурсы));
	
	Для Каждого РесурсИмя Из оас_Модуль.ом_Коллекция().СоответствиеКлючиМассив(Ресурсы) Цикл
		Ресурс	= Новый Соответствие(Ресурсы[РесурсИмя]);
		Методы	= Новый Соответствие(Ресурс.Получить(КлючМетоды));
		Для Каждого МетодИмя Из оас_Модуль.ом_Коллекция().СоответствиеКлючиМассив(Методы) Цикл
			Состав			= Новый Соответствие(Методы[МетодИмя]);
			Ответы			= Новый Соответствие();
			Для Каждого ОтветОписание Из Методы[МетодИмя].Получить(КлючОтвет) Цикл
				Ответы.Вставить(?(ТипЗнч(ОтветОписание.Ключ) = ТипЧисло
				, Формат(ОтветОписание.Ключ, "ЧГ=0")
				, ОтветОписание.Ключ)
				, ОтветОписание.Значение);
			КонецЦикла;
			Состав.Вставить(КлючОтвет, Новый ФиксированноеСоответствие(Ответы));
			Методы.Вставить(МетодИмя, Новый ФиксированноеСоответствие(Состав));
		КонецЦикла;
		Ресурс.Вставить(КлючМетоды, Новый ФиксированноеСоответствие(Методы));
		Ресурсы.Вставить(РесурсИмя, Новый ФиксированноеСоответствие(Ресурс));
	КонецЦикла;
	
	Настройка.Вставить(КлючРесурсы, Новый ФиксированноеСоответствие(Ресурсы));
	
КонецПроцедуры // НастройкаКодОтветовНормализовать 

// Возвращает настройку сервиса
//
// Параметры: 
// 	Сервис - Строка - Имя сервиса по метаданным
//
// Возвращаемое значение: 
// 	Соответствие
//
&НаСервереБезКонтекста 
Функция СервисНастройкаПолучитьНаСервере(Сервис)
	
	Возврат оас_Настройка.Получить(Сервис);
	
КонецФункции // СервисНастройкаПолучитьНаСервере 

// Заполняет список HTTP сервисов 
//
// Параметры: 
// 	Список - СписокЗначений - Заполняемый список сервисов
//
&НаСервереБезКонтекста 
Процедура СервисВыборЗаполнитьНаСервере(Список)
	
	Список.Очистить();
	
	Для Каждого Описание Из Метаданные.HTTPСервисы Цикл
		Список.Добавить(Описание.КорневойURL, Описание.Представление());
	КонецЦикла;
	
	Список.СортироватьПоПредставлению();
	
КонецПроцедуры // СервисВыборЗаполнитьНаСервере 

// Возвращает настройку сервиса
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
//
// Возвращаемое значение: 
// 	ФиксированноеСоответствие, Неопределено
//
&НаСервереБезКонтекста 
Функция НастройкаПолучитьНаСервере(Сервис)
	
	Возврат оас_Настройка.Получить(Сервис);
	
КонецФункции // НастройкаПолучитьНаСервере 

// Возвращает созданную по спецификации настройку
//
// Параметры: 
// 	Спецификация - Строка - Исходный JSON спецификация сервиса
//
// Возвращаемое значение: 
// 	Фиксированное соответствие
//
&НаСервереБезКонтекста 
Функция НастройкаСоздатьНаСервере(Спецификация)
	
	Результат	= Неопределено;
	
	Попытка
		Результат	= оас_Настройка.Создать(Спецификация);
	Исключение
		// BSLLS:DeprecatedMethods8317-off - ошибочно, режим совместимости 8.3.10
		ДесериализацияОшибкаСообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// BSLLS:DeprecatedMethods8317-on
		Результат	= Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // НастройкаСоздатьНаСервере 

// Возвращает значение из хранилища значения
//
// Параметры: 
// 	Хранилище - ХранилищеЗначения - Распаковываемое хранилище
//
// Возвращаемое значение: 
// 	Произвольный
//
&НаСервереБезКонтекста 
Функция ХранилищеЗначениеНаСервере(Хранилище)
	
	Возврат Хранилище.Получить();
	
КонецФункции // ХранилищеЗначениеНаСервере 

// Возвращает полное имя обработки
//
// Параметры: 
// 	Форма - УправляемаяФорма - Форма обработки
//
// Возвращаемое значение: 
// 	Строка
//
&НаСервереБезКонтекста 
Функция ОбработкаИмяПолучитьНаСервере(Форма)
	
	Возврат Форма.РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
КонецФункции // ОбработкаИмяПолучитьНаСервере 

// Возвращает текст сериализованной настройки
//
// Параметры: 
// 	Настройка - Соответствие - Настройки сервиса
//
// Возвращаемое значение: 
// 	Строка
//
// BSLLS:Typo-off - ложное срабатывание на сериализацию
&НаСервереБезКонтекста 
Функция НастройкаСериализоватьНаСервере(Настройка)
	
	// BSLLS:Typo-on
	
	// Сериализем только настройку отображаемую в диалоге
	// исключая все относящееся к спецификации
	
	Правила	= Новый Соответствие();
	
	оас_НастройкаСвойство.Обработчики(Правила, оас_НастройкаСвойство.Обработчики(Настройка));
	оас_НастройкаСвойство.Тема(Правила, оас_НастройкаСвойство.Тема(Настройка));
	
	Возврат оас_Спецификация.Сериализовать(Правила);
	
КонецФункции // НастройкаСериализоватьНаСервере 

// Возвращает десериализованный объект настроек
//
// Параметры: 
// 	Текст - Строка - Исходный текст
//
// Возвращаемое значение: 
// 	Соответствие, Неопределено
//
// BSLLS:Typo-off - ложное на десериализовать
&НаСервереБезКонтекста 
Функция НастройкаДесериализоватьНаСервере(Текст)
	
	// BSLLS:Typo-on
	
	Результат	= Неопределено;
	
	Попытка
		Результат	= оас_Спецификация.Десериализовать(Текст);
	Исключение
		// BSLLS:DeprecatedMethods8317-off - ошибочно, режим совместимости 8.3.10
		ДесериализацияОшибкаСообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// BSLLS:DeprecatedMethods8317-on
		Результат	= Неопределено;
	КонецПопытки;
	
	Если оас_Модуль.ом_Значение().СоответствиеЭто(Результат) Тогда
		Если НЕ оас_Модуль.ом_Значение().СоответствиеЭто(Результат.Получить("Обработчики"))
			ИЛИ НЕ оас_Модуль.ом_Значение().СтрокаЭто(Результат.Получить("Тема"))
			Тогда
			Результат	= Неопределено;
		КонецЕсли;
	Иначе
		Результат	= Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НастройкаДесериализоватьНаСервере 

// Устанавливает значение настройки в кэше. Возвращает
// 	значение на момент до выполнения метода
//
// Параметры: 
// 	Значение - Соответствие - Новое значение
//
// Возвращаемое значение: 
// 	Соответствие
//
&НаКлиенте 
Функция КэшНастройка(Значение = Null)
	
	Ключ		= "Настройка";
	Результат	= Кэш().Получить(Ключ);
	
	Если Значение <> Null Тогда
		Кэш().Вставить(Ключ, Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // КэшНастройка 

// Возвращает локальный кэш обработки
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Соответствие 
//
&НаКлиенте 
Функция Кэш()
	
	Возврат _b0b94d3fd4e44958a5577f330a30c747;
	
КонецФункции // Кэш 

// Возвращает диалог выбора файла спецификации
//
// Параметры: 
// 	Режим - РежимДиалогаВыбораФайла
//
// Возвращаемое значение: 
// 	ДиалогВыбораФайла
//
&НаКлиенте 
Функция ФайлJSONВыборДиалог(Режим)
	
	Результат	= Новый ДиалогВыбораФайла(Режим);
	Результат.МножественныйВыбор	= Ложь;
	Результат.Фильтр				= "JSON файлы (*.json)|*.json";
	
	Возврат Результат;
	
КонецФункции // ФайлJSONВыборДиалог 

// При изменении настройки
//
// Параметры: 
// 	Настройка - ФиксированноеСоответствие - Исходная настройка
//
&НаКлиенте 
Процедура НастройкаПриИзменении(Настройка)
	
	КэшНастройка(Настройка);
	
	ТемаЗаполнить(Настройка);
	СобытияОбработчикиЗаполнить(Настройка);
	РесурсыТаблицаЗаполнить(РесурсыТаблица, Настройка);
	
	ЭлементыПараметрыУстановить();
	
КонецПроцедуры // НастройкаПриИзменении 

// Заполняет тему
//
// Параметры: 
// 	Настройка - Соответствие - Настройки
//
&НаКлиенте
Процедура ТемаЗаполнить(Настройка)
	
	Тема				= ?(Настройка = Неопределено, "", Настройка.Получить("Тема"));
	ДокументацияТема	= ?(ПустаяСтрока(Тема), "view", Тема);
	
КонецПроцедуры // ТемаЗаполнить 

// Заполняет обработчики событий
//
// Параметры: 
// 	Настройка - Соответствие - Настройка сервиса
//
&НаКлиенте 
Процедура СобытияОбработчикиЗаполнить(Настройка)
	
	Состав	= ?(Настройка = Неопределено
	, Новый Соответствие()
	, Настройка.Получить("Обработчики").Получить("ПередОбработкойЗапроса"));
	Если Состав <> Неопределено Тогда
		ПередОбработкойЗапросаИмя			= Состав.Получить("Имя");
		ПередОбработкойЗапросаМетод			= Состав.Получить("Метод");
		ПередОбработкойЗапросаИспользовать	= НЕ ПустаяСтрока(ПередОбработкойЗапросаИмя);
	КонецЕсли;
	Состав	= ?(Настройка = Неопределено
	, Новый Соответствие()
	, Настройка.Получить("Обработчики").Получить("ПослеОбработкиЗапроса"));
	Если Состав <> Неопределено Тогда
		ПослеОбработкиЗапросаИмя			= Состав.Получить("Имя");
		ПослеОбработкиЗапросаМетод			= Состав.Получить("Метод");
		ПослеОбработкиЗапросаИспользовать	= НЕ ПустаяСтрока(ПослеОбработкиЗапросаИмя);
	КонецЕсли;
	
КонецПроцедуры // СобытияОбработчикиЗаполнить 

// Заполняет таблицу ресурсов по настройке
//
// Параметры: 
// 	Таблица - ДаныеФормыКоллекция - Таблица ресурсов
// 	Настройка - Соответствие - Настройка сервиса
//
&НаКлиенте 
Процедура РесурсыТаблицаЗаполнить(Таблица, Настройка)
	
	Таблица.Очистить();
	
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подсматривая в легенду оас_Настройка
	// 
	Обработчики	= Настройка.Получить("Обработчики");
	
	Для Каждого РесурсЭлемент Из Настройка.Получить("Ресурсы") Цикл
		
		Ресурс	= РесурсЭлемент.Значение;
		
		Для Каждого МетодЭлемент Из Ресурс.Получить("Методы") Цикл
			
			Метод	= МетодЭлемент.Значение;
			
			ТаблицаСтрока	= Таблица.Добавить();
			ТаблицаСтрока.Идентификатор	= Метод.Получить("Идентификатор");
			ТаблицаСтрока.Метод			= МетодЭлемент.Ключ;
			ТаблицаСтрока.Ресурс		= Ресурс.Получить("Идентификатор");
			
			Обработчик	= Обработчики.Получить(ТаблицаСтрока.Идентификатор);
			Если Обработчик <> Неопределено Тогда
				ТаблицаСтрока.ОбработчикИмя		= Обработчик.Получить("Имя");
				ТаблицаСтрока.ОбработчикМетод	= Обработчик.Получить("Метод");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Таблица.Сортировать("Ресурс, Метод");
	
КонецПроцедуры // РесурсыТаблицаЗаполнить 

// Выполняет запись данных
//
// Параметры: 
//
&НаКлиенте 
Процедура ДанныеЗаписать()
	
	ОшибкаТекст	= "";
	Если ПустаяСтрока(Сервис) Тогда
		ОшибкаТекст	= НСтр("ru = 'Необходимо выбрать сервис.'");
	КонецЕсли;
	Настройка	= КэшНастройка();
	Если ПустаяСтрока(ОшибкаТекст) И Настройка = Неопределено Тогда
		ОшибкаТекст	= НСтр("ru = 'Отсутствуют настройки.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОшибкаТекст) Тогда
		Сообщение	= Новый СообщениеПользователю;
		Сообщение.Текст = ОшибкаТекст;
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	Правила	= Новый Соответствие(Настройка);
	Правила.Вставить("Обработчики", ОбработчикиКоллекция(РесурсыТаблица));
	Правила.Вставить("Тема", ДокументацияТема);
	
	Настройка	= Новый ФиксированноеСоответствие(Правила);
	КэшНастройка(Настройка);
	
	НастройкаОтветыКодыВСтрокаПреобразовать(Правила);
	
	Если ДанныеЗаписатьНаСервере(Сервис, Настройка) Тогда
		Модифицированность	= Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДанныеЗаписать 

// Возвращает коллекцию обработчиков по таблице ресурсов
//
// Параметры: 
// 	Таблица - ДанныеФормыКоллекция - Таблица ресурсов
//
// Возвращаемое значение: 
// 	ФиксированноеСоответствие
//
&НаКлиенте 
Функция ОбработчикиКоллекция(Таблица)
	
	Результат	= Новый Соответствие();
	
	Для Каждого ТаблицаСтрока Из Таблица Цикл
		ОбработчикиКоллекцияДобавить(Результат
		, ТаблицаСтрока.Идентификатор
		, ТаблицаСтрока.ОбработчикИмя
		, ТаблицаСтрока.ОбработчикМетод);
	КонецЦикла;
	Если ПередОбработкойЗапросаИспользовать Тогда
		ОбработчикиКоллекцияДобавить(Результат
		, "ПередОбработкойЗапроса"
		, ПередОбработкойЗапросаИмя
		, ПередОбработкойЗапросаМетод);
	КонецЕсли;
	Если ПослеОбработкиЗапросаИспользовать Тогда
		ОбработчикиКоллекцияДобавить(Результат
		, "ПослеОбработкиЗапроса"
		, ПослеОбработкиЗапросаИмя
		, ПослеОбработкиЗапросаМетод);
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции // ОбработчикиКоллекция 

// Добавляет сведения об обработчике в коллекцию
//
// Параметры: 
// 	Коллекция - Соответствие - Заполняемая коллекция
// 	Ключ - Строка - Ключ коллекции
// 	Имя - Строка - Полное имя обработки
// 	Метод - Строка - Имя вызываемого метода
//
&НаКлиенте 
Процедура ОбработчикиКоллекцияДобавить(Коллекция, Ключ, Имя, Метод)
	
	Если НЕ ПустаяСтрока(Имя) И НЕ ПустаяСтрока(Метод) Тогда
		Состав	= Новый Соответствие();
		Состав.Вставить("Имя", Имя);
		Состав.Вставить("Метод", Метод);
		Коллекция.Вставить(Ключ, Новый ФиксированноеСоответствие(Состав));
	КонецЕсли;
	
КонецПроцедуры // ОбработчикиКоллекцияДобавить 

// Истина, если режим выбора обработчиков Диалог
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Булево
//
&НаКлиенте 
Функция ОбработчикиВводРежимДиалог()
	
	Возврат ОбработчикВводРежим = 0;
	
КонецФункции // ОбработчикиВводРежимДиалог 

// Устанавливает значение по-умолчанию метода обработчика для строки таблицы ресурсов
//
// Параметры: 
// 	РесурсыСтрока - ДанныеФормыКоллекция - Данные строки таблицы ресурсов
//
&НаКлиенте 
Процедура РесурсыТаблицаОбработчикМетодУмолчаниеУстановить(РесурсыСтрока)
	
	Если ПустаяСтрока(РесурсыСтрока.ОбработчикМетод) Тогда
		РесурсыСтрока.ОбработчикМетод	= "Ответ";
	КонецЕсли;
	
КонецПроцедуры // РесурсыТаблицаОбработчикМетодУмолчаниеУстановить 

// Устанавливает параметры элементов формы
//
// Параметры: 
//
&НаКлиенте 
Процедура ЭлементыПараметрыУстановить()
	
	Значение	= (КэшНастройка() <> Неопределено);
	Элементы.ПередОбработкойЗапросаИспользовать.Доступность	= Значение;
	Элементы.ПослеОбработкиЗапросаИспользовать.Доступность	= Значение;
	Элементы.ДокументацияТема.Доступность					= Значение;
	Элементы.ОбработчикВводРежим.Доступность				= Значение;
	Элементы.СпецификацияСохранить.Доступность				= Значение;
	Элементы.ОбработчикШаблон.Доступность					= Значение;
	Элементы.НастройкаСохранить.Доступность					= Значение;
	
	Значение	= НЕ ПустаяСтрока(Сервис);
	Элементы.СпецификацияЗагрузить.Доступность			= Значение;
	Элементы.НастройкаЗагрузить.Доступность				= Значение;
	
	Значение	= ПередОбработкойЗапросаИспользовать;
	Элементы.ПередОбработкойЗапросаИмя.Доступность		= Значение;
	Элементы.ПередОбработкойЗапросаМетод.Доступность	= Значение;
	Значение	= ПослеОбработкиЗапросаИспользовать;
	Элементы.ПослеОбработкиЗапросаИмя.Доступность		= Значение;
	Элементы.ПослеОбработкиЗапросаМетод.Доступность		= Значение;
	
КонецПроцедуры // ЭлементыПараметрыУстановить 

// Открывает выбор обработчика
//
// Параметры: 
// 	Метод - Строка - Вызываемый метод оповещения формы
// 	Заголовок - Строка - Заголовок диалога
// 	ОповещениеПараметры - Произвольный - Параметры оповещения
//
&НаКлиенте 
Процедура ОбработчикВыборОткрыть(Метод, Заголовок, ОповещениеПараметры)
	
	Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения(Метод
	, ЭтотОбъект
	, ОповещениеПараметры);
	Диалог		= оас_Модуль.ом_МетаданныеКлиент().ВыборДиалогСоздать(Оповещение
	, Заголовок);
	оас_Модуль.ом_МетаданныеКлиент().ВыборДиалогМножественныйВыбор(Диалог, Ложь);
	оас_Модуль.ом_МетаданныеКлиент().ВыборДиалогПодсистемыФильтрВидимыеТолько(Диалог, Ложь);
	оас_Модуль.ом_МетаданныеКлиент().ВыборДиалогКлассыОтбор(Диалог, оас_Модуль.ом_ТипИмя().Обработка());
	оас_Модуль.ом_МетаданныеКлиент().ВыборДиалогОткрыть(Диалог);
			
КонецПроцедуры // ОбработчикВыборОткрыть 

// Записть текста в файл
//
// Параметры: 
// 	Файл - Строка - Путь к файлу
// 	Текст - Строка - Сохраняемый текст
//
&НаКлиенте 
Процедура ТекстЗаписать(Файл, Текст)
	
	Запись	= Новый ЗаписьXML;
	Запись.ОткрытьФайл(Файл, , Ложь);
	Запись.ЗаписатьБезОбработки(Текст);
	Запись.Закрыть();
	
КонецПроцедуры // ТекстЗаписать 

// Выполняет чтение текстового файла. По завершению вызывает заданное оповещение
//
// Параметры: 
// 	Имя - Строка - Имя файла
// 	Оповещение - ОписаниеОповещения - Вызываемое оповещение
//
&НаКлиенте 
Процедура ТекстПрочитать(Имя, Оповещение)
	
	Источник	= Новый ЧтениеДанных(Имя);
	Оповещение	= оас_Модуль.ом_ДиалогКлиент().ОписаниеОповещения("ТекстПрочитатьЗавершение"
	, ЭтотОбъект
	, Новый Структура("Источник, Оповещение", Источник, Оповещение));
	Источник.НачатьЧтениеСимволов(Оповещение);
	
КонецПроцедуры // ТекстПрочитать 

// Завершение чтения текстового файла
//
// Параметры: 
// 	Результат - Строка - Прочитанный текст
// 	ОповещениеПараметры - Структура - Параметры оповещения
//
// Возвращаемое значение: 
// 	Неопределено
//
&НаКлиенте 
Функция ТекстПрочитатьЗавершение(Результат, ОповещениеПараметры) Экспорт
	
	ОповещениеПараметры.Источник.НачатьЗакрытие(оас_Модуль.ом_ДиалогКлиент().ОповещениеЗаглушка(1));
	
	оас_Модуль.ом_ДиалогКлиент().ОповещениеВыполнить(ОповещениеПараметры.Оповещение, Результат, Истина);
	
	Возврат Неопределено;
	
КонецФункции // ТекстПрочитатьЗавершение 

// Выдает ошибку десериализации исходного текста
//
// Параметры: 
// 	Текст - Строка - Информация об ошибке
//
// BSLLS:Typo-off - ложное на десериализацию
&НаКлиентеНаСервереБезКонтекста 
Процедура ДесериализацияОшибкаСообщить(Текст)
	
	Сообщение	= Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Ошибка десериализации исходного текста. Возможно формат не JSON?'")
	+ Символы.ПС + Текст;
	Сообщение.Сообщить(); 
	
	// BSLLS:Typo-on
	
КонецПроцедуры // ДесериализацияОшибкаСообщить 

// Заполняет обработчики таблицы ресурсов
//
// Параметры: 
// 	Таблица - ДанныеФормыКоллекция - Таблица ресусрсов
// 	Обработчики - Соответствие - Коллекция обработчиков
//
&НаКлиенте 
Процедура РесурсыТаблицаОбработчикиЗаполнить(Таблица, Обработчики)
	
	ИзменениеЕсть	= Ложь;
	
	Для Каждого ТаблицаСтрока Из Таблица Цикл
		Вызов	= Обработчики.Получить(ТаблицаСтрока.Идентификатор);
		Если Вызов <> Неопределено Тогда
			ИзменениеЕсть	= Истина;
			ТаблицаСтрока.ОбработчикИмя		= Вызов.Получить("Имя");
			ТаблицаСтрока.ОбработчикМетод	= Вызов.Получить("Метод");
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность	= Истина;
	
КонецПроцедуры // РесурсыТаблицаОбработчикиЗаполнить 

#КонецОбласти
