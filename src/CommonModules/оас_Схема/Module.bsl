// @strict-types
#Область ПрограммныйИнтерфейс

// Генератор типа схемы.
// 
// Параметры:
//  Схема - см. оас_Спецификация_1.SchemaObject
//  Определения - Соответствие из КлючИЗначение -:
//  	*Ключ - Строка
//  	*Значение - Строка
//  ИмяВложенногоОпределения - Строка
//  ГенерироватьОписание - Булево
//  
// Возвращаемое значение:
//  Строка - Тип
Функция ГенераторТипаСхемы(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание = Истина) Экспорт
	Если Схема.anyOf <> Неопределено Тогда
		Результат = ГенераторТипаСхемы_AnyOf(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание);
	ИначеЕсли Схема.type = "number" Или Схема.type = "integer" Тогда
		Результат = ГенераторТипаСхемы_Numeric(Схема, ГенерироватьОписание);
	ИначеЕсли Схема.type = "string" Тогда
		Результат = ГенераторТипаСхемы_String(Схема, ГенерироватьОписание);
	ИначеЕсли Схема.type = "boolean" Тогда
		Результат = ГенераторТипаСхемы_Boolean(Схема, ГенерироватьОписание);
	ИначеЕсли Схема.type = "array" Тогда
		Результат = ГенераторТипаСхемы_Array(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание);
	ИначеЕсли Схема.type = "object" Тогда
		Результат = ГенераторТипаСхема_Object_Вложенный(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание);
	Иначе
		Результат = ГенераторТипаСхемы_НеопределенныйТип(Схема, ГенерироватьОписание);
	КонецЕсли;

	Если Схема.Свойство("nullable") Тогда
		Результат = ГенераторТипаСхемы_Маркер_Nullable() + ", " + Результат;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Генератор типа схемы any of.
// 
// Параметры:
//  Схема - Структура:
//  	*anyOf - см. оас_Спецификация_1.SchemaObject_Array
//	Определения - см. ГенераторТипаСхемы.Определения
//	ИмяВложенногоОпределения - Строка
//	ГенерироватьОписание - Булево
//	
// Возвращаемое значение:
//  Строка
Функция ГенераторТипаСхемы_AnyOf(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание = Истина) Экспорт
	Результат = "";
	Количество = Схема.anyOf.Количество();
	Для Номер = 1 По Количество Цикл
		ВложеннаяСхема = Схема.anyOf.Получить(Номер - 1);
		ИмяОпределения = ИмяВложенногоОпределения + "_" + Строка(Номер);
		ТипОпределения = ГенераторТипаСхемы(ВложеннаяСхема, Определения, ИмяОпределения, Ложь);
		Результат = Результат + ТипОпределения;
		Если Номер <> Количество Тогда
			Результат = Результат + ", ";
		КонецЕсли;
	КонецЦикла;
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Генератор типа схемы Numeric.
// 
// Параметры:
//  Схема - Структура:
//  	*type - Строка - "number" | "integer"
//  	*multipleOf - Неопределено, Число -
//  	*maximum - Неопределено, Число -
//  	*exclusiveMaximum - Неопределено, Число -
//  	*minimum - Неопределено, Число -
//  	*exclusiveMinimum - Неопределено, Число -
//  ГенерироватьОписание - Булево
// Возвращаемое значение:
// 	Строка - "Число"
Функция ГенераторТипаСхемы_Numeric(Схема, ГенерироватьОписание = Истина) Экспорт
	Результат = "Число";
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Генератор типы схемы String.
// 
// Параметры:
//  Схема - Структура:
//  	*type - Строка - "string"
// 		*minLength - Неопределено, Число -
//		*maxLength - Неопределено, Число -
//		*pattern - Неопределено, Строка -
//		*format - Строка, Неопределено - "date" | "date-time" | "password" | "byte" | "binary" | Строка
//	ГенерироватьОписание - Булево
// Возвращаемое значение:
//  Строка - "Строка"
Функция ГенераторТипаСхемы_String(Схема, ГенерироватьОписание = Истина) Экспорт
	Результат = "Строка";
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Генератор типа схемы Boolean.
// 
// Параметры:
//  Схема - Структура:
//  	*type - Строка - "boolean"
//  	*nullable - Булево, Неопределено -
//  ГенерироватьОписание - Булево
// Возвращаемое значение:
//  Строка - "Булево"
Функция ГенераторТипаСхемы_Boolean(Схема, ГенерироватьОписание = Истина) Экспорт
	Результат = "Булево";
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат
КонецФункции

// Генератор типа схемы Array.
// 
// Параметры:
//  Схема - Структура:
//  	*type - Строка - "array"
//		*maxItems - Неопределено, Число -
//		*minItems - Неопределено, Число -
//		*uniqueItems - Неопределено, Булево -
//		*maxContains - Неопределено, Число -
//		*minContains - Неопределено, Число -
//		*prefixItems - Неопределено, см. оас_Спецификация_1.SchemaObject_PrefixItems -
//		*items - Неопределено, см. оас_Спецификация_1.SchemaObject -
//		*contains - Неопределено, см. SchemaObject -
//	Определения - см. ГенераторТипаСхемы.Определения
//	ИмяВложенногоОпределения - Строка
//	ГенерироватьОписание - Булево
// Возвращаемое значение:
//  Строка - "Массив из *"
Функция ГенераторТипаСхемы_Array(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание = Истина) Экспорт
	Результат = "Массив";
	Если Схема.Свойство("items") И Схема.items <> Неопределено Тогда
		Items = Схема.items; // см. оас_Спецификация_1.SchemaObject
		ТипОпределения = ГенераторТипаСхемы(Items, Определения, ИмяВложенногоОпределения + "_Элемент");
		Результат = Результат + " из " + ТипОпределения;
	Иначе
	КонецЕсли;

	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Генератор типа схема object вложенный.
// 
// Параметры:
//  Схема - см. ГенераторТипаСхемы_Object.Схема
//	Определения - см. ГенераторТипаСхемы.Определения
//	ИмяВложенногоОпределения - Строка
// 	ГенерироватьОписание - Булево
// 	
// Возвращаемое значение:
//  Строка
Функция ГенераторТипаСхема_Object_Вложенный(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание = Истина) Экспорт
	ТипОпределения = ГенераторТипаСхемы_Object(Схема, Определения, ИмяВложенногоОпределения, ГенерироватьОписание);
	Определения.Вставить(ИмяВложенногоОпределения, ТипОпределения);
	Результат = "см. " + ИмяВложенногоОпределения;
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Генератор типа схемы Object.
// 
// Параметры:
//  Схема - Структура:
//  	*type - Строка - "object"
//		*maxProperties - Неопределено, Число -
//		*minProperties - Неопределено, Число -
//		*required - Неопределено, Массив из Строка -
//		*dependentRequired - Неопределено, см. оас_Спецификация_1.SchemaObject_DependentRequired -
//		*properties - Неопределено, см. оас_Спецификация_1.SchemaObject_Properties -
//		*patternProperties - Неопределено, см. оас_Спецификация_1.SchemaObject_PatternProperties -
//		*additionalProperties - Неопределено, см. оас_Спецификация_1.SchemaObject -
//		*propertyNames - Неопределено, см. оас_Спецификация_1.SchemaObject -
//	Определения - см. ГенераторТипаСхемы.Определения
//	ИмяКорняОпределения - Строка
//	ГенерироватьОписание - Булево
//	
// Возвращаемое значение:
//  Строка - "Стурктура: *"
Функция ГенераторТипаСхемы_Object(Схема, Определения, ИмяКорняОпределения, ГенерироватьОписание = Истина) Экспорт
	Результат = "Структура";
	ОпределениеСхемы = "";
	Если Схема.Свойство("properties") И Схема.properties <> Неопределено Тогда
		Properties = Схема.properties; // см. оас_Спецификация_1.SchemaObject_Properties
		Для Каждого Property Из Properties Цикл
			Имя = Property.Ключ;
			Определение = Property.Значение;
			
			ТипОпределения = ГенераторТипаСхемы(Определение, Определения, ИмяКорняОпределения + "_" + Имя);

			Если Не (Схема.Свойство("required") И Схема.required <> Неопределено И Схема.required.Найти(Имя)
				<> Неопределено) Тогда
				ТипОпределения = ГенераторТипаСхемы_Маркер_Nullable() + ", " + ТипОпределения;
			КонецЕсли;

			ОпределениеСхемы = ОпределениеСхемы + "*" + Имя + " - " + ТипОпределения + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	
	Если ОпределениеСхемы <> "" Тогда
		Результат = Результат + ":" + Символы.ПС + оас_Утилиты_КлиентСервер.СтрДобавитьОтступДляКаждойСтроки(ОпределениеСхемы, Символы.Таб)
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Генератор типа схемы неопрделенный тип.
// 
// Параметры:
//  Схема - см. оас_Спецификация_1.SchemaObject
//  ГенерироватьОписание - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ГенераторТипаСхемы_НеопределенныйТип(Схема, ГенерироватьОписание = Истина) Экспорт
	Результат = "Неопределено";
	Если ГенерироватьОписание Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы(Схема);
	КонецЕсли;
	Возврат Результат
КонецФункции

// Генератор типа схемы маркер Nullable.
// 
// Возвращаемое значение:
//  Строка - "Неопределено"
Функция ГенераторТипаСхемы_Маркер_Nullable() Экспорт
	Возврат "Неопределено"
КонецФункции

// Генератор описания схемы.
// 
// Параметры:
//  Схема - см. оас_Спецификация_1.SchemaObject
// 
// Возвращаемое значение:
//  Строка
Функция ГенераторОписанияСхемы(Схема) Экспорт
	Результат = "-";
	Если Схема.enum <> Неопределено Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы_Enum(Схема);
	ИначеЕсли Схема.const <> Неопределено Тогда
		Результат = Результат + " " + ГенераторОписанияСхемы_Const(Схема);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Генератор описания схемы enum.
// 
// Параметры:
//  Схема - Структура -:
//  	*enum - Массив из Произвольный
//
// Возвращаемое значение:
//  Строка
Функция ГенераторОписанияСхемы_Enum(Схема) Экспорт
	Результат = "";
	
	Для Каждого Элемент Из Схема.enum Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Результат = Результат + """" + Элемент + """ | ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Генератор описания схемы const.
// 
// Параметры:
//  Схема - Структура -:
//  	*const - Произвольный
// 
// Возвращаемое значение:
//  Строка
Функция ГенераторОписанияСхемы_Const(Схема) Экспорт
	Если ТипЗнч(Схема.const) = Тип("Строка") Тогда
		Возврат """" + Схема.const + """";
	КонецЕсли;
КонецФункции
#КонецОбласти
