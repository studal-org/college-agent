// @strict-types
#Область ПрограммныйИнтерфейс

// Individual.
// 
// Параметры:
//  Ссылка - СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Структура:
//		*id - УникальныйИдентификатор
//		*fullName - Строка, Неопределено -
//		*email - Строка, Неопределено -
//		*name - Неопределено, см. Individual_Name -
Функция Individual(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("fullName", Ссылка.Наименование);
	Объект.Вставить("email", Неопределено);

	//@skip-check reading-attribute-from-database
	Для Каждого КонтактнаяИнформация Из Ссылка.КонтактнаяИнформация Цикл
		Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.Email Тогда
			Объект.Вставить("email", КонтактнаяИнформация.АдресЭП);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ФИОФизЛица = РегистрыСведений.ФИОФизЛиц.Выбрать( , , Новый Структура("ФизЛицо", Ссылка), "Убыв");

	Если Не ФИОФизЛица.Следующий() Тогда
		Name = Неопределено;
	Иначе
		Name = Individual_Name(ФИОФизЛица);
	КонецЕсли;

	Объект.Вставить("name", Name);

	//@skip-check constructor-function-return-section
	Возврат Объект;
КонецФункции

// Individual name.
// 
// Параметры:
//  Ссылка - РегистрСведенийВыборка.ФИОФизЛиц
// 
// Возвращаемое значение:
//  Структура:
//  	*first - Строка
//  	*middle - Строка
//  	*last - Строка
Функция Individual_Name(Ссылка) Экспорт
	Объект = Новый Структура;
	Объект.Вставить("first", Ссылка.Имя);
	Объект.Вставить("middle", Ссылка.Отчество);
	Объект.Вставить("last", Ссылка.Фамилия);
	Возврат Объект;
КонецФункции

// Student.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Студенты
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*individualId - УникальныйИдентификатор, Неопределено -
//  	*groupId - УникальныйИдентификатор, Неопределено -
Функция Student(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("individualId", stdl_Утилиты.ПолучитьУИДСсылки(Ссылка.ФизЛицо));
	//@skip-check reading-attribute-from-database
	Объект.Вставить("groupId", stdl_Утилиты.ПолучитьУИДСсылки(stdl_УчебныеГруппы.ПолучитьПоСтуденту(Ссылка)));

	Возврат Объект;
КонецФункции

// Administrator.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*individualId - УникальныйИдентификатор, Неопределено - 
Функция Administrator(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("individualId", stdl_Утилиты.ПолучитьУИДСсылки(Ссылка.ФизическоеЛицо));

	Возврат Объект;
КонецФункции

// Discipline.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Дисциплины
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*title - Строка
//  	*shortTitle - Строка
//  	*fullTitle - Строка, Неопределено -
Функция Discipline(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("shortTitle", Ссылка.СокращенноеНаименование);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("fullTitle", Ссылка.ПолноеНаименование);

	Возврат Объект;
КонецФункции

// Practice Kind.
// 
// Параметры:
//  Ссылка - СправочникСсылка.ВидыПрактик
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*practiceType - Строка, Неопределено - "educational" | "internship" | "undergraduate" | Неопределено
//  	*title - Строка
//  	*shortTitle - Строка
//  	*fullTitle - Строка, Неопределено -
Функция PracticeKind(Ссылка) Экспорт
	ТипПрактикиКНаименованию = Новый Соответствие;
	ТипПрактикиКНаименованию.Вставить(Перечисления.ТипыПрактик.Учебная, "educational");
	ТипПрактикиКНаименованию.Вставить(Перечисления.ТипыПрактик.Производственная, "internship");
	ТипПрактикиКНаименованию.Вставить(Перечисления.ТипыПрактик.Преддипломная, "undergraduate");

	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	
	//@skip-check reading-attribute-from-database
	PracticeType = ТипПрактикиКНаименованию.Получить(Ссылка.ТипПрактики); // Строка, Неопределено

	Объект.Вставить("practiceType", PracticeType);

	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("shortTitle", Ссылка.СокращенноеНаименование);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("fullTitle", Ссылка.ПолноеНаименование);

	//@skip-check constructor-function-return-section
	Возврат Объект;
КонецФункции

// Control type.
// 
// Параметры:
//  Ссылка - СправочникСсылка.ВидыКонтроля
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*title - Строка
//  	*markTypeId - УникальныйИдентификатор
Функция ControlType(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("markTypeId", Ссылка.ТипОценки.УникальныйИдентификатор());

	Возврат Объект;
КонецФункции

// Work type.
// 
// Параметры:
//  Ссылка - СправочникСсылка.ВидыНагрузки
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*title - Строка
Функция WorkType(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);

	Возврат Объект;
КонецФункции

// Group.
// 
// Параметры:
//  Ссылка - СправочникСсылка.УчебныеГруппы
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*title - Строка
Функция Group(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);

	Возврат Объект;
КонецФункции

// Schedule for date.
// 
// Параметры:
//  Ссылка - ДокументСсылка.РасписаниеНаДату
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*scheduleDate - Дата, Неопределено -
//  	*periodScheduleId - УникальныйИдентификатор, Неопределено -
Функция ScheduleForDate(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("scheduleDate", Ссылка.ДатаРасписания);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("periodScheduleId", ?(ЗначениеЗаполнено(Ссылка.РасписаниеЗвонков),
		Ссылка.РасписаниеЗвонков.УникальныйИдентификатор(), Неопределено));

	Возврат Объект;
КонецФункции

// Period.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса
//  ДисциплинаКНаименованию - см. stdl_СоответствияНаименований.ДисциплинаКНаименованию
// 
// Возвращаемое значение:
//  Структура:
//  	*groupId - УникальныйИдентификатор, Неопределено -
//  	*subgroup - Число, Неопределено -
//  	*periodNumber - Число, Неопределено -
//  	*discipline - Неопределено, Структура -:
//  		*objectType - Строка - "discipline" | "practiceKind"
//  		*objectId - УникальныйИдентификатор
//  	*teacherId - УникальныйИдентификатор, Неопределено -
//  	*classroomId - УникальныйИдентификатор, Неопределено -
//  	*workTypeId - УникальныйИдентификатор, Неопределено -
Функция Period(Выборка, ДисциплинаКНаименованию) Экспорт
	//@skip-check property-return-type
	Если Не ЗначениеЗаполнено(Выборка.Дисциплина) Тогда
		Discipline = Неопределено;
	Иначе
		Discipline = Новый Структура;
		//@skip-check property-return-type
		Discipline.Вставить("objectType", stdl_Утилиты.ИсключитьНеопределено(ДисциплинаКНаименованию.Получить(
			ТипЗнч(Выборка.Дисциплина)), "Неизвестный тип дисциплины"));
		//@skip-check dynamic-access-method-not-found
		//@skip-check property-return-type
		Discipline.Вставить("objectId", Выборка.Дисциплина.УникальныйИдентификатор());
	КонецЕсли;

	Объект = Новый Структура;
	//@skip-check property-return-type
	//@skip-check dynamic-access-method-not-found
	Объект.Вставить("groupId", stdl_Утилиты.ПолучитьУИДСсылки(Выборка.УчебнаяГруппа));
	//@skip-check property-return-type
	Объект.Вставить("subgroup", Выборка.Подгруппа);
	//@skip-check property-return-type
	Объект.Вставить("periodNumber", Выборка.НомерПары);
	Объект.Вставить("discipline", Discipline);
	//@skip-check property-return-type
	//@skip-check dynamic-access-method-not-found
	Объект.Вставить("teacherId", stdl_Утилиты.ПолучитьУИДСсылки(Выборка.Преподаватель));
	//@skip-check property-return-type
	//@skip-check dynamic-access-method-not-found
	Объект.Вставить("classroomId", stdl_Утилиты.ПолучитьУИДСсылки(Выборка.Аудитория));
	//@skip-check property-return-type
	//@skip-check dynamic-access-method-not-found
	Объект.Вставить("workTypeId", stdl_Утилиты.ПолучитьУИДСсылки(Выборка.ВидНагрузки));

	//@skip-check constructor-function-return-section
	Возврат Объект;
КонецФункции

// Periods schedule.
// 
// Параметры:
//  Ссылка - СправочникСсылка.РасписанияЗвонков
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*title - Строка
//  	*schedule - Массив из см. PeriodsSchedule_ScheduleItem
Функция PeriodsSchedule(Ссылка) Экспорт
	Schedule = Новый Массив; // Массив из см. PeriodsSchedule_ScheduleItem
	//@skip-check reading-attribute-from-database
	Для Каждого Элемент Из Ссылка.Расписание Цикл
		Schedule.Добавить(PeriodsSchedule_ScheduleItem(Элемент));
	КонецЦикла;

	Объект = Новый Структура;
	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);
	Объект.Вставить("schedule", Schedule);

	Возврат Объект;
КонецФункции

// Periods schedule schedule item.
// 
// Параметры:
//  Ссылка - СправочникТабличнаяЧастьСтрока.РасписанияЗвонков.Расписание
// 
// Возвращаемое значение:
//  Структура:
//  	*periodNumber - Число, Неопределено -
//  	*startTime - Дата, Неопределено -
//  	*endTime - Дата, Неопределено -
Функция PeriodsSchedule_ScheduleItem(Ссылка) Экспорт
	Объект = Новый Структура;
	Объект.Вставить("periodNumber", Ссылка.НомерПары);
	Объект.Вставить("startTime", Ссылка.ВремяНачала);
	Объект.Вставить("endTime", Ссылка.ВремяОкончания);
	Возврат Объект;
КонецФункции

// Classroom.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Аудитории
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*title - Строка
//  	*number - Число
Функция Classroom(Ссылка) Экспорт
	Объект = Новый Структура;
	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("title", Ссылка.Наименование);
	//@skip-check reading-attribute-from-database
	Объект.Вставить("number", Ссылка.Код);
	Возврат Объект;
КонецФункции

// Employee.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Структура:
//  	*id - УникальныйИдентификатор
//  	*individualId - УникальныйИдентификатор, Неопределено -
Функция Employee(Ссылка) Экспорт
	Объект = Новый Структура;

	Объект.Вставить("id", Ссылка.УникальныйИдентификатор());
	//@skip-check reading-attribute-from-database
	Объект.Вставить("individualId", stdl_Утилиты.ПолучитьУИДСсылки(Ссылка.Физлицо));
	//@skip-check reading-attribute-from-database

	Возврат Объект;
КонецФункции

#КонецОбласти