// BSLLS:CommonModuleInvalidType-off - тип модуля верен, может вызываться только в серверном контексте
// 
// HTTP сервисы по спецификации OpenAPI
//  

#Область ПрограммныйИнтерфейс

// Возвращает ответ на HTTP запрос
//
// Параметры: 
// 	Источник - HTTPСервисЗапрос - Входящий запрос
// 
// Возвращаемое значение:
// 	HTTPСервисОтвет
//
Функция Ответ(Источник) Экспорт
	
	// BSLLS:Typo-off - ложное срабатывание на Логгер
	Логгер	= Логгер("Ответ");
	// BSLLS:Typo-on
	оас_Модуль.лг_Лог().Трассировка(Логгер, "Получен " 
	+ Источник.HTTPМетод + " запрос " + Источник.БазовыйURL + Источник.ОтносительныйURL);
	
	Контекст	= оас_Контекст.Получить(Источник);
	Ответ		= Неопределено;
	ОтветТип	= Тип("HTTPСервисОтвет");
	
	Если НЕ оас_Контекст.ОшибкаЕсть(Контекст) Тогда
		
		оас_Модуль.лг_Лог().Трассировка(Логгер, "Контекст собран корректно: " + Контекст.ОшибкаТекст);
		Сервис		= оас_Контекст.Сервис(Контекст);
		
		Отказ	= Ложь;
		Попытка
			Ответ	= ПередОбработкойЗапросаВызвать(Сервис, Контекст, Источник, Отказ);
			Если НЕ Отказ И НЕ оас_Контекст.ОшибкаЕсть(Контекст) Тогда
				Ответ	= ОбработчикВызвать(Сервис, Контекст);
				Если НЕ оас_Контекст.ОшибкаЕсть(Контекст) Тогда
					ПослеОбработкиЗапросаВызвать(Сервис, Контекст, Источник, Ответ);
				КонецЕсли;
			КонецЕсли;
		Исключение
			// BSLLS:DeprecatedMethods8317-off - ошибочно, режим совместимости 8.3.10
			оас_Контекст.ОшибкаУстановить(Контекст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			// BSLLS:DeprecatedMethods8317-on
			оас_Модуль.лг_Лог().Ошибка(Логгер, "Ошибка при выполнении обработчиков сервиса " + Сервис 
			+ " метод " + оас_Контекст.Сервис(Контекст) + " ресурс " + оас_Контекст.Ресурс(Контекст));
		КонецПопытки;
	КонецЕсли;
	Если НЕ оас_Контекст.ОшибкаЕсть(Контекст) И ТипЗнч(Ответ) <> ОтветТип Тогда
		оас_Контекст.ОшибкаУстановить(Контекст
		, НСтр("ru = 'Обработчики вернули ответ неподходящего типа'"));
	КонецЕсли;
	Если оас_Контекст.ОшибкаЕсть(Контекст) Тогда
		Ответ	= оас_Справка.ЗапросОшибка(Источник, Контекст);
		Если ТипЗнч(Ответ) <> ОтветТип Тогда
			Ответ	= КонтекстОшибкаОтветУмолчание(Источник, Контекст);
		КонецЕсли;		
	КонецЕсли;
	
	оас_Модуль.лг_Лог().Трассировка(Логгер, "Сформирован ответ " + Ответ.КодСостояния);
	
	Возврат Ответ;
	
КонецФункции // Ответ 

// Возвращает объект обработки по заданному имени
//
// Параметры: 
// 	Сервис - Строка - Имя сервиса
// 	Имя - Строка - Полное имя объекта обработчика
//
// Возвращаемое значение: 
// 	ОбработкаОбъект
//
Функция ОбработкаОбъект(Сервис, Имя) Экспорт
	
	Возврат оас_СервисПовтИсп.ОбработкаОбъект(Сервис, Имя);
	
КонецФункции // Обработчик 

// Возвращает новый ответ сервиса
//
// Параметры: 
// 	Код - Число - Код состояния ответа
// 	Заголовки - Соответствие - Заголовки ответа
// 	Расшифровка - Строка - Расшифровка кода состояния
//
// Возвращаемое значение: 
// 	HTTPСервисОтвет
//
Функция ПротоколОтвет(Код, Заголовки = Неопределено, Расшифровка = Неопределено) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат Новый HTTPСервисОтвет(Код, Расшифровка, Заголовки);
	#Иначе
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли
	
КонецФункции // ПротоколОтвет 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызов события ПередОбработкойЗапроса
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Контекст - Структура - Контекст запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Отказ - Булево - Флаг отказа от дальнейшей обработки
//
// Возвращаемое значение: 
// 	HTTPСервисОтвет, Неопределено
//
Функция ПередОбработкойЗапросаВызвать(Сервис, Контекст, Запрос, Отказ)
	
	Результат	= Неопределено;
	
	Обработчик	= оас_Контекст.ПередОбработкойЗапроса(Контекст);
	Объект		= ОбработчикОбъект(Сервис, Обработчик, Контекст, Ложь);
	
	Если Объект <> Неопределено Тогда
		// BSLLS:ExecuteExternalCodeInCommonModule-off - это необходимо
		Результат	= Вычислить("Объект." + ОбработчикМетод(Обработчик) + "(Контекст, Запрос, Отказ)");
		// BSLLS:ExecuteExternalCodeInCommonModule-on
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПередОбработкойЗапросаВызвать 

// Вызывает основную обработку запроса. 
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Контекст - Структура - Контекст запроса
//
// Возвращаемое значение: 
// 	HTTPСервисОтвет
//
Функция ОбработчикВызвать(Сервис, Контекст)
	
	Результат	= Неопределено;
	
	Обработчик	= оас_Контекст.Обработчик(Контекст);
	Объект		= ОбработчикОбъект(Сервис, Обработчик, Контекст, Истина);
	
	Если Объект <> Неопределено Тогда
		// BSLLS:ExecuteExternalCodeInCommonModule-off - это необходимо
		Результат	= Вычислить("Объект." + ОбработчикМетод(Обработчик) + "(Контекст)");
		// BSLLS:ExecuteExternalCodeInCommonModule-on
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОбработчикВызвать 

// Вызывает обработчик события ПослеОбработкиЗапроса
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Контекст - Структура - Контекст запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Ответ - HTTPСервисОтвет - ранее сформированный ответ
//
Процедура ПослеОбработкиЗапросаВызвать(Сервис, Контекст, Запрос, Ответ)
	
	Обработчик	= оас_Контекст.ПослеОбработкиЗапроса(Контекст);
	Объект		= ОбработчикОбъект(Сервис, Обработчик, Контекст, Ложь);
	
	Если Объект <> Неопределено Тогда
		// BSLLS:ExecuteExternalCodeInCommonModule-off - это необходимо
		Выполнить("Объект." + ОбработчикМетод(Обработчик) + "(Контекст, Запрос, Ответ)");
		// BSLLS:ExecuteExternalCodeInCommonModule-on
	КонецЕсли;
	
КонецПроцедуры // ПослеОбработкиЗапросаВызвать 

// Возвращает объект обработчика
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Обработчик - Соответствие - Информация об обработчике
// 	Контекст - Структура - Контекст запроса
// 	Обязательный - Булево - Флаг обязательного наличия
//
// Возвращаемое значение: 
// 	ОбработкаОбъект, Неопределено
//
Функция ОбработчикОбъект(Сервис, Обработчик, Контекст, Обязательный)
	
	Результат	= Неопределено;
	ОшибкаТекст	= "";
	
	Если Обработчик = Неопределено Тогда
		Если Обязательный Тогда
			ОшибкаТекст	= "Не задан обработчик";
		КонецЕсли;
	Иначе
		Имя			= ОбработчикИмя(Обработчик);
		Результат	= ОбработкаОбъект(Сервис, Имя);
		Если Результат = Неопределено Тогда
			ОшибкаТекст	= "Не удалось создать объект обработчика " + Имя;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОшибкаТекст) Тогда
		ОшибкаТекст	= НСтр("ru = '" + ОшибкаТекст + "'");
		оас_Контекст.ОшибкаУстановить(ОшибкаТекст);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОбработчикОбъект 

// Ответ по-умолчанию на ошибку построения контекста входящего запроса
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Контекст - Структура - Собранный контекст запроса
//
// Возвращаемое значение: 
// 	HTTPСервисОтвет
//
Функция КонтекстОшибкаОтветУмолчание(Запрос, Контекст)
	
	Тело	= "<html><head><meta content=""text/html; charset=utf-8"" http-equiv=Content-Type></meta></head>
	|<body><b>Ошибка при построении контекста входящего запроса:</b><br>
	|" + Контекст.ОшибкаТекст + "
	|<br><br>
	|Ресурс<br>
	|<i>" + Запрос.БазовыйURL + Запрос.ОтносительныйURL + "</i>
	|</body></html>";
	
	Результат	= ПротоколОтвет(400, , "Error");
	Результат.УстановитьТелоИзСтроки(Тело);
	
	Возврат Результат;
	
КонецФункции // КонтекстОшибкаОтветУмолчание 

// Возвращает логгер
//
// Параметры: 
// 	Событие - Строка - Имя события
//
// Возвращаемое значение: 
//
// BSLLS:Typo-off - ложное срабатывание на Логгер
Функция Логгер(Событие)
	
// BSLLS:Typo-on
	Возврат оас_Модуль.лг_Логгер().Создать(ЛогОбъект(), Событие);
	
КонецФункции // Логгер 

// Возвращает объект лога
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ЛогОбъект()
	
	// BSLLS:Typo-off - ложное срабатывание оас_
	Возврат "ОМ.оас_Сервис";
	// BSLLS:Typo-on
	
КонецФункции // ЛогОбъект 

// Возвращает имя обработки 
//
// Параметры: 
// 	Обработчик - Соответствие - Обработчик события
//
// Возвращаемое значение: 
// 	Строка
//
Функция ОбработчикИмя(Обработчик)
	
	Возврат Обработчик.Получить("Имя");
	
КонецФункции // ОбработчикИмя 

// Возвращает метод обработчика
//
// Параметры: 
// 	Обработчик - Соответствие - Обработчик события
//
// Возвращаемое значение: 
// 	Строка
//
Функция ОбработчикМетод(Обработчик)
	
	Возврат Обработчик.Получить("Метод");
	
КонецФункции // ОбработчикМетод 

#КонецОбласти

// BSLLS:CommonModuleInvalidType-on
