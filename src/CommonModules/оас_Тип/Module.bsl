// BSLLS:CommonModuleInvalidType-off - тип модуля верен, может вызываться только в серверном контексте
// 
// Информация о типе содержимого элемента
//  

#Область ПрограммныйИнтерфейс

// Истина, если содержание описываем число
//
// Параметры: 
// 	Правила - Соответствие - Правила элемента
//
// Возвращаемое значение: 
// 	Булево
//
Функция ЧислоЭто(Правила) Экспорт
	
	Возврат Описание(Правила).Идентификатор = ИдентификаторIntegerИмя();
	
КонецФункции // ЧислоЭто 

// Истина, если содержание описывает строку
//
// Параметры: 
// 	Правила - Соответствие - Правила элемента
//
// Возвращаемое значение: 
// 	Булево
//
Функция СтрокаЭто(Правила) Экспорт
	
	Возврат Описание(Правила).Идентификатор = ИдентификаторStringИмя();
	
КонецФункции // СтрокаЭто 

// Истина, если содержание описывает двоичные данные
//
// Параметры: 
//	Правила - Соответствие - Правила элемента
//
// Возвращаемое значение: 
// 	Булево
//
Функция ДвоичныеДанныеЭто(Правила) Экспорт
	
	Описание	= Описание(Правила);
	
	Возврат Описание <> Неопределено
	И Описание.Идентификатор = ИдентификаторStringИмя()
	И (Описание.Формат = ФорматBineryИмя()
	ИЛИ Описание.Формат = ФорматByteИмя());
	
КонецФункции // ДвоичныеДанныеЭто 

// Истина, если тип определен
//
// Параметры: 
//	Правила - Соответствие - Правила элемента
//
// Возвращаемое значение: 
// 	Булево
//
Функция Определен(Правила) Экспорт
	
	Описание	= Описание(Правила);
	
	Возврат Описание <> Неопределено И НЕ ПустаяСтрока(Описание.Идентификатор);
	
КонецФункции // Определен 

// Истина, если mime тип относится к двоичным данным
//
// Параметры: 
// 	Тип - Строка - Mime тип
//
// Возвращаемое значение: 
// 	булево
//
Функция MimeДвоичныеДанныеЭто(Тип) Экспорт
	
	Результат	= Ложь;
	
	// Согласно Вики
	Части	= оас_Модуль.ом_Строка().ВМассив(НРег(Тип), "/");
	Если Части.Количество() Тогда
		Класс	= Части[0];
		Вид		= ?(Части.Вграница(), Части[1], "");
		Результат	= MimeКлассыДвоичныеДанныеЗначения().Получить(Класс);
		Если Результат = Неопределено Тогда
			Результат	= MimeApplicationДвоичныеДанныеЭто(Класс, Вид)
			ИЛИ MimeMultipartДвоичныеДанныеЭто(Класс, Вид);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // MimeДвоичныеДанныеЭто 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Истина, если вид типа Application принадлежит двоичным данным
//
// Параметры: 
// 	Класс - Строка - Класс типа
// 	Вид - Строка - Вид типа
//
// Возвращаемое значение: 
// 	Булево
//
Функция MimeApplicationДвоичныеДанныеЭто(Класс, Вид)
	
	Возврат Класс = "application"
	И Вид <> "atom+xml"
	И Вид <> "json"
	И Вид <> "javascript"
	И Вид <> "soap+xml"
	И Вид <> "xhtml+xml"
	И Вид <> "xml-dtd"
	И Вид <> "xop+xml"
	И Вид <> "xml"
	И Вид <> "x-www-form-urlencoded";
	
КонецФункции // MimeApplicationДвоичныеДанныеЭто 

// Истина, если вид типа Multipart принадлежит двоичным данным
//
// Параметры: 
// 	Класс - Строка - Класс типа
// 	Вид - Строка - Вид типа
//
// Возвращаемое значение: 
// 	Булево
//
Функция MimeMultipartДвоичныеДанныеЭто(Класс, Вид)
	
	Возврат Класс = "multipart"
	И (Вид = "signed"
	ИЛИ Вид = "encrypted");
	
КонецФункции // MimeMultipartДвоичныеДанныеЭто 

// Возвращает значения содержимого двоичные данные для классов 
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция MimeКлассыДвоичныеДанныеЗначения()
	
	Результат	= Новый Соответствие();
	
	Результат.Вставить("audio", Истина);
	Результат.Вставить("image", Истина);
	Результат.Вставить("message", Ложь);
	Результат.Вставить("model", Истина);
	Результат.Вставить("text", Ложь);
	Результат.Вставить("video", Истина);
	Результат.Вставить("vnd", Истина);
	
	Возврат Результат;
	
КонецФункции // MimeКлассыДвоичныеДанныеЗначения 

// Возвращает описание типа правила
//
// Параметры: 
// 	Правила - Соответствие - Описание типа спецификации
//
// Возвращаемое значение: 
// 	Структура
//
Функция Описание(Правила)
	
	Результат	= Новый Структура("Идентификатор, Формат");
	
	Схема	= Схема(Правила);
	Если Схема <> Неопределено Тогда
		Результат.Идентификатор	= Схема["type"];
		Результат.Формат		= Схема["format"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Описание 

// Возвращает схему типа
//
// Параметры: 
// 	Правила - Соответствие - Правила MediaTypeObject
//
// Возвращаемое значение: 
//
Функция Схема(Правила)
	
	Возврат Правила.Получить("schema");
	
КонецФункции // Схема 

// Возвращает имя идентификатор Integer
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ИдентификаторIntegerИмя()
	
	Возврат "integer";
	
КонецФункции // ИдентификаторIntegerИмя 

// Возвращает имя идентификатора String
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ИдентификаторStringИмя()
	
	Возврат "string";
	
КонецФункции // ИдентификаторStringИмя 

// Возвращает имя формата Binary
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ФорматBineryИмя()
	
	Возврат "binary";
	
КонецФункции // ФорматBineryИмя 

// Возвращает имя формата Byte
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция ФорматByteИмя()
	
	Возврат "byte";
	
КонецФункции // ФорматByteИмя 

#КонецОбласти

// BSLLS:CommonModuleInvalidType-on
