// BSLLS:CommonModuleInvalidType-off - тип модуля верен, может вызываться только в серверном контексте
// 
// Контекст входящего HTTP запроса. Передается конечным обработчикам
// 
// Контекст - обработанный по спецификации запрос, ФиксированнаяСтруктура вида
// 	Сервис - БазовыйURL запроса, равен КорневойURL сервиса
// 	Метод - HTTPМетод
// 	Ресурс - ОтносительныйURL запроса
// 	Точка - Ресурс спецификации (user/{username}, /order/{orderId}/update)
// 	Параметры - Соответствие - полученные по спецификации параметры
// 	Тело - Строка, ДвоичныеДанные - полученное по спецификации тело запроса
// 	Обработчик - Соответствие - полное имя и вызываемы метод обработчика ресурса по настройкам
//  

#Область ПрограммныйИнтерфейс

// Возвращает контекст выполнения запроса структурой
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос
//
// Возвращаемое значение: 
// 	Структура
//
Функция Получить(Запрос) Экспорт
	
	Результат	= Новый Структура();
	ОшибкаТекст(Результат, "");
	ОшибкаЕсть(Результат, Ложь);
	ОшибкаКод(Результат, 0);
	
	Сервис		= ЗапросСервис(Запрос);
	Ресурс		= Неопределено;
	Правила		= Неопределено;
	Метод		= Неопределено;
	Настройка	= оас_Настройка.Получить(Сервис);
	
	Сервис(Результат, Сервис);
	Ресурс(Результат, Запрос.ОтносительныйURL);
	Метод(Результат, Запрос.HTTPМетод);
	
	Если Настройка = Неопределено Тогда
		ОшибкаУстановить(Результат
		, НСтр("ru = 'Сервис """ + Сервис + """ не зарегистрирован в настройках.'"));
	КонецЕсли;
	ТочкаЗаполнить(Результат, Запрос, Настройка);
	Если НЕ ОшибкаЕсть(Результат) Тогда
		Правила	= Настройка.Получить("Ресурсы").Получить(Точка(Результат));
		Если Правила = Неопределено Тогда
			ОшибкаУстановить(Результат
			, НСтр("ru = 'Внутренняя ошибка: отсутствует настройка "
			+ "ресурса """ + Точка(Результат) + """! Обратитесь к администратору.'")
			, 501);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ОшибкаЕсть(Результат) Тогда
		ПравилаМетод	= Правила.Получить("Методы").Получить(Запрос.HTTPМетод);
		Если ПравилаМетод = Неопределено Тогда
			ОшибкаУстановить(Результат
			, НСтр("ru = 'Для ресурса """ + Точка(Результат) + """ метод """ + Метод(Результат) + """ не определен.'"));
		КонецЕсли;
	КонецЕсли;
	Если НЕ ОшибкаЕсть(Результат) Тогда
		ПараметрыЗаполнить(Результат, Запрос, ПравилаМетод);
		ТелоЗаполнить(Результат, Запрос, ПравилаМетод);
		Если ОшибкаЕсть(Результат) Тогда
			ОшибкаТекст(Результат, ОшибкаТекст(Результат) + НСтр("ru = 'метода """ + Метод(Результат)
			+ """ ресурса """ + Точка(Результат) + """'"));
		КонецЕсли;
	КонецЕсли;
	ОбработчикЗаполнить(Результат, Запрос, Настройка);
	
	Возврат Результат;
	
КонецФункции // Получить

//
// Свойства контекста
// 

// Устанавливает значение сервиса запроса. Взовращает значение
// 	на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Строка - Новое значение
//
// Возвращаемое значение: 
// 	Строка
//
Функция Сервис(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоСервисИмя(), Значение, "");
	
КонецФункции // Сервис 

// Устанавливает значение ресурса контекста. Возвращает значение
// 	на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Строка - Новое значение
//
// Возвращаемое значение: 
// 	Строка
//
Функция Ресурс(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоРесурсИмя(), Значение, "");
	
КонецФункции // Ресурс 

// Устанавливает значение точки спецификации запроса. Возвращает значение 
// 	на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Стурктура - Контекст входящего запроса
// 	Значение - Строка - Новое значение
//
// Возвращаемое значение: 
// 	Строка
//
Функция Точка(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоТочкаИмя(), Значение, "");
	
КонецФункции // Точка 

// Устанавливает значение HTTP метода запроса. Возвращает значение
// 	на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Строка - Новое значение
//
// Возвращаемое значение: 
// 	Строка
//
Функция Метод(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоМетодИмя(), Значение, "");
	
КонецФункции // Метод 

// Устанавливает параметры контекста входящего запроса. Возвращает
// 	значение на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Соответствие - Новое значение
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция Параметры(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоПараметрыИмя(), Значение, Новый Соответствие());
	
КонецФункции // Параметры 

// Устанавливает значение тела контекста запроса. Возвращает значение
// 	на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Строка, ДвоичныеДанные - Новое значение
//
// Возвращаемое значение: 
// 	Строка, ДвоичныеДанные
//
Функция Тело(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоТелоИмя(), Значение, Неопределено);
	
КонецФункции // Тело 

// Устанавливает обработчик контекста. Возвращает значение на 
// 	момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Строка - Новое значение
//
// Возвращаемое значение: 
// 	Строка
//
Функция Обработчик(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоОбработчикИмя(), Значение, "");
	
КонецФункции // Обработчик 

// Устанавливает флаг наличия ошибки контекста. Возвращает значение
// 	на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст запроса
// 	Значение - Булево - Новое значение
//
// Возвращаемое значение: 
// 	Булево
//
Функция ОшибкаЕсть(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоОшибкаЕстьИмя(), Значение, Ложь);
	
КонецФункции // ОшибкаЕсть 

// Возвращает текст ошибки контекста
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Значение - Строка - Новое значение
//
// Возвращаемое значение: 
// 	Строка
//
Функция ОшибкаТекст(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоОшибкаТекстИмя(), Значение, "");
	
КонецФункции // ОшибкаТекст 

// Возвращает код ошибки. Является HTTP кодом ответа при ошибке
//
// Параметры: 
// 	Контекст - Структура - Контекст запроса
// 	Значение - Число - Новое значение
//
// Возвращаемое значение: 
// 	Число
//
Функция ОшибкаКод(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоОшибкаКодИмя(), Значение, 0);
	
КонецФункции // ОшибкаКод 

// Устанавливает ошибку контекста запроса
//
// Параметры: 
// 	Контекст - Структура - Собираемый контекст запроса
// 	Текст - Строка - Текст ошибки
// 	Код - Число - Код ошибки (http ответа)
//
Процедура ОшибкаУстановить(Контекст, Текст, Код = 400) Экспорт
	
	ОшибкаТекст(Контекст, Текст);
	ОшибкаЕсть(Контекст, Истина);
	ОшибкаКод(Контекст, Код);
	
КонецПроцедуры // ОшибкаУстановить 

// Устанавливает обработчик события ПередОбработкойЗапроса. Возвращает
// 	значение на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст запроса
// 	Значение - Соответствие - Новое значение
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция ПередОбработкойЗапроса(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоПередОбработкойЗапросаИмя(), Значение);
	
КонецФункции // ПередОбработкойЗапроса 

// Устанавливает обработчик события ПослеОбработкиЗапроса. Возвращает
// 	значение на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст запроса
// 	Значение - Соответствие - Новое значение
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция ПослеОбработкиЗапроса(Контекст, Значение = Null) Экспорт
	
	Возврат Свойство(Контекст, СвойствоПослеОбработкиЗапросаИмя(), Значение);
	
КонецФункции // ПослеОбработкиЗапроса 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значение свойства контекста. Возвращает 
// 	значение на момент до выполнения метода
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Имя - Строка - Имя свойства
// 	Значение - Произвольный - Новое значение
// 	Умолчание - Произвольный - Значение по-умолчанию
//
// Возвращаемое значение: 
// 	Произвольный
//
Функция Свойство(Контекст, Имя, Значение = Null, Умолчание = Неопределено)
	
	Результат	= оас_Модуль.ом_Значение().СвойствоПолучить(Контекст, Имя, Умолчание);
	
	Если Значение <> Null Тогда
		Контекст.Вставить(Имя, Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Свойство 

// Возвращает серсив запроса
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
//
// Возвращаемое значение: 
// 	Строка
//
Функция ЗапросСервис(Запрос) 
	
	Адрес	= Запрос.БазовыйURL;
	Позиция	= СтрНайти(Адрес, "/", НаправлениеПоиска.СКонца);
	
	Возврат Сред(Адрес, Позиция + 1);
	
КонецФункции // ЗапросСервис 

// Возвращает точку спецификации запроса
//
// Параметры: 
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Настройка - ФиксированноеСоответствие - Настройки сервиса
//
// Возвращаемое значение: 
// 	Строка
//
Функция ЗапросТочка(Запрос, Настройка = Неопределено) 
	
	Результат	= Неопределено;
	
	Правила	= ?(Настройка = Неопределено
	, оас_Настройка.Получить(ЗапросСервис(Запрос))
	, Настройка);
	
	Адрес	= Запрос.ОтносительныйURL;
	// Проверяемся сначала по элементарным, потом параметризованным ресурсам
	Если оас_НастройкаСвойство.ТочкиЭлементарные(Правила).Получить(Адрес) = Истина Тогда
		Результат	= Адрес;
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Для Каждого Элемент Из оас_НастройкаСвойство.ТочкиПараметризованные(Правила) Цикл
			Если оас_Модуль.ом_Строка().ШаблонПринадлежит(Адрес, Элемент.Ключ) Тогда
				Результат	= Элемент.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗапросТочка 

// Заполняет свойство Точка контекста
//
// Параметры: 
// 	Контекст - Структура - Контекст входящего запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Настройка - ФиксированноеСоответствие - Настройки сервиса
//
Процедура ТочкаЗаполнить(Контекст, Запрос, Настройка)
	
	Если НЕ ОшибкаЕсть(Контекст) Тогда
		Точка	= ЗапросТочка(Запрос, Настройка);
		Если Точка = Неопределено Тогда
			ОшибкаУстановить(Контекст
			, НСтр("ru = 'Для адреса """ + Ресурс(Контекст) + """ в спецификации не определена точка.'"));
		Иначе
			Точка(Контекст, Точка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТочкаЗаполнить 

// Заполняет свойство Обработчик контекста
//
// Параметры: 
// 	Контекст - Структура - Заполняемый контекст запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Настройка - Соответствие - Настройки сервиса
//
Процедура ОбработчикЗаполнить(Контекст, Запрос, Настройка)
	
	Если НЕ ОшибкаЕсть(Контекст) Тогда
		Обработчик	= оас_Настройка.Обработчик(Сервис(Контекст)
		, Точка(Контекст)
		, Метод(Контекст)
		, Настройка);
		Если Обработчик <> Неопределено Тогда
			Обработчик(Контекст, Обработчик);
			Методы	= оас_НастройкаСвойство.Обработчики(Настройка);
			ПередОбработкойЗапроса(Контекст, Методы.Получить("ПередОбработкойЗапроса"));
			ПослеОбработкиЗапроса(Контекст, Методы.Получить("ПослеОбработкиЗапроса"));
		Иначе
			ОшибкаУстановить(Контекст
			, НСтр("ru = 'Методу """ + Метод(Контекст) + """ ресурса """ + Точка(Контекст)
			+ " не назначен обработчик! Обратитесь к администратору.'")
			, 501);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработчикЗаполнить 

// Заполняет тело контекста запроса
//
// Параметры: 
// 	Контекст - Структура - Заполняемый контекст запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Правила - ФиксированнойСоответствие - Правила метода настроек
//
Процедура ТелоЗаполнить(Контекст, Запрос, Правила)
	
	Если НЕ ОшибкаЕсть(Контекст) Тогда
		ТелоПравила	= Правила.Получить("Тело");
		Если ТелоПравила = Неопределено Тогда
			ОшибкаУстановить(Контекст
			, НСтр("ru = 'Внутренняя ошибка: не определены правила тела запроса '"));
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанныеЭто	= (ТелоПравила.Получить("ДвоичныеДанныеЭто") = Истина);
		ОшибкаЕсть			= Ложь;
		
		Данные				= ?(ДвоичныеДанныеЭто
		, Запрос.ПолучитьТелоКакДвоичныеДанные()
		, Запрос.ПолучитьТелоКакСтроку());
		
		Если ТелоПравила.Получить("Обязательный") = Истина И НЕ ТелоЕсть(Данные, ДвоичныеДанныеЭто) Тогда
			ОшибкаУстановить(Контекст, "Получено пустое обязательное тело запроса ");
		КонецЕсли;
		
		Тело(Контекст, Данные);
	КонецЕсли;
	
КонецПроцедуры // ТелоЗаполнить 

// Истина, если тело запроса присутствует и НЕпустое
//
// Параметры: 
// 	Данные - Строка, ДвоичныеДанные - Полученное тело запроса
// 	ДвоичныеДанныеЭто - Булево - Тип тела
//
// Возвращаемое значение: 
// 	Булево
//
Функция ТелоЕсть(Данные, ДвоичныеДанныеЭто)
	
	Возврат (ДвоичныеДанныеЭто И Данные <> Неопределено И Данные.Размер())
	ИЛИ (НЕ ДвоичныеДанныеЭто И НЕ ПустаяСтрока(Данные));
	
КонецФункции // ТелоЕсть 

// Заполняет параметры контекста запроса
//
// Параметры: 
// 	Контекст - Структура - Заполняемый контекст запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Правила - ФоксированноеСоответствие - Правила метода настроек
//
Процедура ПараметрыЗаполнить(Контекст, Запрос, Правила)
	
	Если ОшибкаЕсть(Контекст) Тогда
		Возврат;
	КонецЕсли;
	Параметры	= Правила.Получить("Параметры");
	Если Параметры = Неопределено Тогда
		ОшибкаУстановить(Контекст
		, НСтр("ru = 'Внутренняя ошибка: отсутствует описание параметров '"));
		Возврат;
	КонецЕсли;
	
	Результат	= Новый Соответствие();
	
	// BSLLS:NumberOfValuesInStructureConstructor-off - работает быстрее
	Кэш		= Новый Структура("Ресурс, ПутьИндексы, Число, ПутьЧасти, КукиПараметры"
	, Запрос.ОтносительныйURL
	, Правила.Получить("ПутьПараметрыИндексы")
	, оас_Модуль.ом_ОписаниеТипов().Создать("Число")
	, Неопределено
	, Неопределено);
	// BSLLS:NumberOfValuesInStructureConstructor-on
	
	Для Каждого Элемент Из Параметры Цикл
		Параметр	= Элемент.Значение;
		Значение	= ПараметрЗначение(Контекст, Запрос, Параметр, Кэш);
		Если ОшибкаЕсть(Контекст) Тогда
			Прервать;
		Иначе
			Результат.Вставить(оас_Параметр.Имя(Параметр), Значение);
		КонецЕсли;
	КонецЦикла;
	
	Параметры(Контекст, Новый ФиксированноеСоответствие(Результат));
	
КонецПроцедуры // ПараметрыЗаполнить 

// Возвращает значение параметра
//
// Параметры: 
// 	Контекст - Структура - Контекст запроса
// 	Запрос - HTTPСервисЗапрос - Входящий запрос
// 	Параметр - Структура - Описание параметра
// 	Кэш - Структура - Кэш
//
// Возвращаемое значение: 
// 	Число, Строка, Неопределено
//
Функция ПараметрЗначение(Контекст, Запрос, Параметр, Кэш)
	
	Результат	= Неопределено;
	
	Имя			= оас_Параметр.Имя(Параметр);
	Размещение	= оас_Параметр.Размещение(Параметр);
	
	Если оас_ПараметрРазмещение.РесурсЭто(Размещение) Тогда
		Индекс	= Кэш.ПутьИндексы.Получить(Имя);
		Если Индекс = Неопределено Тогда
			ОшибкаУстановить(Контекст
			, НСтр("ru = 'Внутренняя ошибка: не найден индекс пути " + "параметра """ + Имя + """ '"));
		Иначе
			// Не проверяемся на выход индекса за границу массива
			// потому что адрес уже подходит под шаблон
			Результат	= ПутьЧасти(Кэш.Ресурс, Кэш.ПутьЧасти)[Индекс];
		КонецЕсли;
	ИначеЕсли оас_ПараметрРазмещение.ПараметрыЭто(Размещение) Тогда
		Результат	= Запрос.ПараметрыЗапроса.Получить(Имя);
	ИначеЕсли оас_ПараметрРазмещение.ЗаголовкиЭто(Размещение) Тогда
		Результат	= Запрос.Заголовки.Получить(Имя);
	ИначеЕсли оас_ПараметрРазмещение.КукиЭто(Размещение) Тогда
		Результат	= КукиПараметры(Запрос, Кэш.КукиПараметры).Получить(Имя);
	Иначе
		ОшибкаУстановить(Контекст
		, НСтр("ru = 'Внутренняя ошибка: неизвестное размещение " + "параметра """ + Имя + """ '"));
	КонецЕсли;
	Если Результат = Неопределено И оас_Параметр.Обязательный(Параметр) Тогда
		ОшибкаУстановить(Контекст
		, НСтр("ru = 'Отсутствует обязательный параметр " + """" + Имя + """ '"));
	КонецЕсли;
	Если Результат <> Неопределено И оас_Параметр.ЧислоЭто(Параметр) Тогда
		Результат	= ПараметрЧисло(Контекст, Параметр, Результат, Кэш);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПараметрЗначение 

// Возвращает значение параметра числом
//
// Параметры: 
// 	Контекст - Структура - Контекст запроса
// 	Параметр - Структура - Описание параметра
// 	Значение - Строка - Исходное значение
// 	Кэш - Структура - Кэш получения параметров
//
// Возвращаемое значение: 
// 	Число
//
Функция ПараметрЧисло(Контекст, Параметр, Значение, Кэш)
	
	Результат	= Кэш.Число.ПривестиЗначение(Значение);
	Если Результат = 0 И СтрЗаменить(СтрЗаменить(Значение, "0", ""), ".", "") <> "" Тогда
		ОшибкаУстановить(Контекст
		, НСтр("ru = 'Ошибочное значение параметра """ + оас_Параметр.Имя(Параметр) + """: ожидается число '"));
		Результат	= Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПараметрЧисло 

// Возвращает коллекцию параметров куки
//
// Параметры: 
// 	Запрос - HTTPЗапрос - Входящий запрос
// 	Кэш - Соответствие - Ранее сформированный кэш
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция КукиПараметры(Запрос, Кэш = Неопределено)
	
	Результат	= Кэш;
	Если Результат = Неопределено Тогда
		Результат	= КукиКоллекция(Строка(Запрос.Заголовки.Получить("Cookie")));
		Кэш			= Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // КукиПараметры 

// Возвращает коллекцию параметров Куки
//
// Параметры: 
// 	Источник - Строка - Куки запроса
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция КукиКоллекция(Источник)
	
	Результат	= Новый Соответствие();
	
	Позиция		= 0;
	КукиМассив	= оас_Модуль.ом_Строка().ВМассив(Источник, ";");
	Для каждого КукиЭлемент Из КукиМассив Цикл
		Ключ		= Неопределено;
		Значение	= Неопределено;
		Если оас_Модуль.ом_Строка().ПодстрокаЕсть(КукиЭлемент, "=", Позиция) Тогда
			Ключ		= СокрЛП(Лев(КукиЭлемент, Позиция - 1));
			Значение	= Сред(КукиЭлемент, Позиция + 1);
			Результат.Вставить(СокрЛП(Лев(КукиЭлемент, Позиция - 1)), Сред(КукиЭлемент, Позиция + 1));
		Иначе
			Ключ		= СокрЛП(КукиЭлемент);
		КонецЕсли;
		// Срезаем уточнение HttpOnly
		Если Ключ <> "HttpOnly" Тогда
			Если оас_Модуль.ом_Строка().ПодстрокаЕсть(Ключ, "HttpOnly,", Позиция) Тогда
				Ключ	= СокрЛП(Сред(Ключ, 10));
			КонецЕсли;
			Результат.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // КукиКоллекция 

// Возвращает части пути
//
// Параметры: 
// 	Ресурс - Строка - Ресурс запроса
// 	Кэш - Массив - Ранее вычисленные части пути
//
// Возвращаемое значение: 
// 	Массив
//
Функция ПутьЧасти(Ресурс, Кэш = Неопределено)
	
	Результат	= Кэш;
	
	Если Результат = Неопределено Тогда
		Результат	= оас_Модуль.ом_Строка().ВМассив(Сред(Ресурс, 2), "/");
		Кэш			= Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПутьЧасти 

//
// Имена свойств
// 

// Возвращает имя свойства Сервис
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоСервисИмя()
	
	Возврат "Сервис";
	
КонецФункции // СвойствоСервисИмя 

// Возвращает имя свойства Ресурс
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоРесурсИмя()
	
	Возврат "Ресурс";
	
КонецФункции // СвойствоРесурсИмя 

// Возвращает имя свойства Точка
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоТочкаИмя()
	
	Возврат "Точка";
	
КонецФункции // СвойствоТочкаИмя 

// Возвращает имя свойства Метод
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоМетодИмя()
	
	Возврат "Метод";
	
КонецФункции // СвойствоМетодИмя 

// Возвращает имя свойства Тело
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоТелоИмя()
	
	Возврат "Тело";
	
КонецФункции // СвойствоТелоИмя 

// Возвращает имя свойства Обработчик
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоОбработчикИмя()
	
	Возврат "Обработчик";
	
КонецФункции // СвойствоОбработчикИмя 

// Возвращает имя свойства Параметры
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоПараметрыИмя()
	
	Возврат "Параметры";
	
КонецФункции // СвойствоПараметрыИмя 

// Возвращает имя свойства ОшибкаТекст
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоОшибкаТекстИмя()
	
	Возврат "ОшибкаТекст";
	
КонецФункции // СвойствоОшибкаТекстИмя 

// Возвращает имя свойства ОшибкаЕсть
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоОшибкаЕстьИмя()
	
	Возврат "ОшибкаЕсть";
	
КонецФункции // СвойствоОшибкаЕстьИмя 

// Возвращает имя свойства ОшибкаКод
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоОшибкаКодИмя()
	
	Возврат "ОшибкаКод";
	
КонецФункции // СвойствоОшибкаКодИмя 

// Возвращает имя свойства ПередОбработкойЗапроса
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоПередОбработкойЗапросаИмя()
	
	Возврат "ПередОбработкойЗапроса";
	
КонецФункции // СвойствоПередОбработкойЗапросаИмя 

// Возвращает имя свойства ПослеОбработкиЗапроса
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Строка
//
Функция СвойствоПослеОбработкиЗапросаИмя()
	
	Возврат "ПослеОбработкиЗапроса";
	
КонецФункции // СвойствоПослеОбработкиЗапросаИмя 

#КонецОбласти

// BSLLS:CommonModuleInvalidType-on
