// @strict-types
#Область ПрограммныйИнтерфейс
// Получить.
// 
// Параметры:
//  УИД - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументСсылка.РасписаниеНаДату
Функция Получить(УИД) Экспорт
	РасписаниеНаДату = Документы.РасписаниеНаДату.ПолучитьСсылку(УИД);

	//@skip-check reading-attribute-from-database
	Если РасписаниеНаДату.ПолучитьОбъект() = Неопределено Или Не РасписаниеНаДату.Проведен
		Или РасписаниеНаДату.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат РасписаниеНаДату;
КонецФункции

// Получить по дате расписания.
// 
// Параметры:
//  ДатаРасписания - Дата
//  УчебнаяГруппа - СправочникСсылка.УчебныеГруппы
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументСсылка.РасписаниеНаДату
Функция ПолучитьПоДатеРасписанияДляУчебнойГруппы(ДатаРасписания, УчебнаяГруппа) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасписаниеНаДату.Ссылка
	|ИЗ
	|	Документ.РасписаниеНаДату КАК РасписаниеНаДату
	|ГДЕ
	|	РасписаниеНаДату.ДатаРасписания = &ДатаРасписания
	|	И РасписаниеНаДату.Проведен = ИСТИНА
	|	И РасписаниеНаДату.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("ДатаРасписания", ДатаРасписания);
	Запрос.УстановитьПараметр("УчебнаяГруппа", УчебнаяГруппа);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		//@skip-check property-return-type
		Ссылка = Выборка.Ссылка; // см. ДокументСсылка.РасписаниеНаДату
		//@skip-check reading-attribute-from-database
		Строки = Ссылка.Расписание.НайтиСтроки(Новый Структура("УчебнаяГруппа", УчебнаяГруппа));
		Если Строки.Количество() > 0 Тогда
			Возврат Ссылка;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции
#КонецОбласти