// BSLLS:CommonModuleInvalidType-off - тип модуля верен, может вызываться только в серверном контексте
// 
// Хранимые настройки сервисов. Для каждого сервиса, определаемого по
// базовому URL (КорневойURL в метаданных) входящих запросов хранится 
// свое ФиксированноеСоответствие формата
// 
// Легенда:
// 	Идентификатор точки - ресурс спецификации вида /users/{Id}
// 	<Значение> - какое-либо переменное значение
// 	<Состав> - Соответствие, описание структуры на следующем уровне
// 	описано в виде <Ключ>: <Значение>
// 
// Состав:
// 	"Спецификация": ФиксированноеСоответствие - исходная спецификация
// 	"Схема": Соответствие - десериализованная спецификация
// 	"Тема": "read|view" - используемая для построения документации тема
// 	"Обработчики": <Состав>
// 		"<Метод>#<Идентификатор точки>": <Состав> 
// 			"Имя": "Полное имя обработки"
// 			"Метод": "Имя вызываемого метода"
//		"ПередОбработкойЗапроса": <Состав>
// 			"Имя": "Полное имя обработки"
// 			"Метод": "Имя вызываемого метода"
// 		"ПослеОбработкиЗапроса": <Состав>
// 			"Имя": "Полное имя обработки"
// 			"Метод": "Имя вызываемого метода"
// 	"ТочкиЭлементарные": <Состав>
// 		"<Идентификатор точки>": Истина - не содержащие в path переменных
// 	"ТочкиПараметризованные": <Состав>
// 		"<Шаблон поиска>": "<Идентификатор точки>" - содержащие в path переменные
// 	"Ресурсы": <Состав>
// 		"<Идентификатор точки>": <Состав>
// 			"ПутьПараметризован": <Булево>
// 			"Идентификатор": <Идентификатор ресурса>
// 			"Методы": <Состав>
// 				"<Метод>": <Состав>
// 					"Идентификатор": "<Метод>#<Идентификатор точки>"
// 					"ПутьПараметрыИндексы": <Состав>
// 						"<Имя параметра>": <Индекс части пути>
// 					"Параметры": <Состав>
// 						"Имя": <Имя>
// 						"Размещение": <path|query|header|cookie>
// 						"Обязательный": <Булево>
// 						"ЧислоЭто": <Булево>
// 					"Тело": <Состав>
// 						"ДвоичныеДанныеЭто": <Булево>
// 						"Обязательный": <Булево>
// 					"Ответ": <Состав>
// 						"Код": <Описание>
//  

#Область ПрограммныйИнтерфейс

// Возвращает кэшированные настройки сервиса
//
// Параметры: 
// 	Сервис - Строка - Корневой URL сервиса
//
// Возвращаемое значение: 
// 	ФиксированноеСоответствие
//
Функция Получить(Сервис) Экспорт
	
	Возврат оас_НастройкаПовтИсп.Получить(Сервис);
	
КонецФункции // Получить 

// Сохраняет настройки сервиса
//
// Параметры: 
// 	Сервис - Строка - Идентификатор сервиса
// 	Настройка - Соответствие - Сохраняемая настройка
//
Процедура Сохранить(Сервис, Настройка) Экспорт
	
	оас_НастройкаХранилище.Сохранить(Сервис, Настройка);
	
КонецПроцедуры // Сохранить 

// Возвращает настройки сервиса по спецификации
//
// Параметры: 
// 	Спецификация - Строка - Исходная спецификация OpenAPI
//
// Возвращаемое значение: 
// 	ФиксированноеСоответствие
//
Функция Создать(Спецификация) Экспорт
	
	Результат	= Новый Соответствие();
	ОшибкаТекст	= "";
	Правила		= Неопределено;
	
	Правила	= оас_Спецификация.СсылкиРазыменовать(оас_Спецификация.Десериализовать(Спецификация));
	
	МетодыДоступные			= оас_МетодСловарь.ДоступныеМассив();
	ТочкиОбработчики		= Новый Соответствие();
	ТочкиЭлементарные		= Новый Соответствие();
	ТочкиПараметризованные	= Новый Соответствие();
	Ресурсы					= Новый Соответствие();
	// Делим точки на параметризованные и элементарные. Заодно собираем их контексты
	Корень	= "#/paths";
	Для Каждого Элемент Из оас_Спецификация.СсылкаЗначение(Правила, Корень) Цикл
		Ресурс					= Элемент.Ключ;
		РесурсПравила			= Элемент.Значение;
		РесурсПараметризован	= оас_Ресурс.ПутьПараметризован(Ресурс);
		Если НЕ РесурсПараметризован Тогда
			ТочкиЭлементарные.Вставить(Ресурс, Истина);
		КонецЕсли;
		РесурсПараметры	= оас_Параметр.Коллекция(РесурсПравила);
		Состав			= Новый Соответствие();
		Состав.Вставить("ПутьПараметризован", РесурсПараметризован);
		Состав.Вставить("Идентификатор", Ресурс);
		Методы			= Новый Соответствие();
		Для Каждого Метод Из МетодыДоступные Цикл
			Контекст	= МетодКонтекст(РесурсПравила, Ресурс, Метод, РесурсПараметры);
			Если Контекст <> Неопределено Тогда
				// Вставляем в параметризованную коллекцию на каждом проходе
				// для проверки корректности состава переменных для каждого
				// заявленного метода
				Если РесурсПараметризован Тогда
					ТочкиПараметризованные.Вставить(оас_Ресурс.Шаблон(Ресурс, Контекст["Параметры"])
					, Ресурс);
				КонецЕсли;
				Методы.Вставить(Метод, Контекст);
			КонецЕсли;
		КонецЦикла;
		Состав.Вставить("Методы", Новый ФиксированноеСоответствие(Методы));
		Ресурсы.Вставить(Ресурс, Новый ФиксированноеСоответствие(Состав));
	КонецЦикла;
	
	оас_НастройкаСвойство.Спецификация(Результат, Спецификация);
	оас_НастройкаСвойство.Обработчики(Результат
	, Новый ФиксированноеСоответствие(ТочкиОбработчики));
	оас_НастройкаСвойство.ТочкиЭлементарные(Результат
	, Новый ФиксированноеСоответствие(ТочкиЭлементарные));
	оас_НастройкаСвойство.ТочкиПараметризованные(Результат
	, Новый ФиксированноеСоответствие(ТочкиПараметризованные));
	оас_НастройкаСвойство.Ресурсы(Результат
	, Новый ФиксированноеСоответствие(Ресурсы));
	оас_НастройкаСвойство.Тема(Результат, "view");
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции // Создать 

// Истина, если доступно администрирование системы
//
// Параметры: 
//
// Возвращаемое значение: 
// 	Булево
//
Функция АдминистрированиеДоступно() Экспорт
	
	Возврат ПравоДоступа("АдминистрированиеДанных", Метаданные);
	
КонецФункции // АдминистрированиеДоступно 

// Возвращает обработчик точки сервиса
//
// Параметры: 
// 	Сервис - Строка - Корневой URL сервиса
// 	Ресурс - Строка - Ресурс запроса
// 	Метод - Строка - HTTP метод запроса
// 	Настройка - ФиксированноеСоответствие - Используемая настройка
//
// Возвращаемое значение: 
// 	Строка - Имя обработчика
//
Функция Обработчик(Сервис, Ресурс, Метод, Настройка = Неопределено) Экспорт
	
	Результат	= Неопределено;
	
	Правила	= ?(Настройка = Неопределено, Получить(Сервис), Настройка);
	Если Правила <> Неопределено Тогда
		Результат	= оас_НастройкаСвойство.Обработчики(Правила)
		.Получить(оас_Ресурс.Идентификатор(Ресурс, Метод));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Обработчик 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает контекст метода
//
// Параметры: 
// 	ТочкаПравила - Соответствие - Правила точки
// 	Ресурс - Строка - Имя ресурса 
// 	Метод - Строка - Идентификатор метода
// 	РесурсПараметры - Соответствие - Общие параметры ресурса
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция МетодКонтекст(ТочкаПравила, Ресурс, Метод, РесурсПараметры)
	
	Результат	= Неопределено;
	Правила		= ТочкаПравила.Получить(НРег(Метод));
	
	Если Правила <> Неопределено Тогда
		
		Параметры	= Новый Соответствие(РесурсПараметры);
		оас_Модуль.ом_Коллекция().СоответствиеДополнить(Параметры, оас_Параметр.Коллекция(Правила), Ложь);
		
		Результат	= Новый Соответствие();
		Результат.Вставить("Идентификатор", оас_Ресурс.Идентификатор(Ресурс, Метод));
		Результат.Вставить("ПутьПараметрыИндексы", оас_Ресурс.ПутьПараметрыИндексы(Ресурс));
		Результат.Вставить("Параметры", Новый ФиксированноеСоответствие(Параметры));
		Результат.Вставить("Тело", оас_Тело.Создать(Правила));
		Результат.Вставить("Ответ", ОтветКоды(Правила));
	КонецЕсли;
	
	Возврат ?(Результат = Неопределено
	, Неопределено
	, Новый ФиксированноеСоответствие(Результат));
	
КонецФункции // МетодКонтекст 

// Возвращает внутреннее описание возможных ответов
//
// Параметры: 
// 	Правила - Соответствие - OperationObject. Правила метода конечной точки
//
// Возвращаемое значение: 
// 	Соответствие
//
Функция ОтветКоды(Правила)
	
	Результат	= Новый Соответствие();
	Числа		= оас_Модуль.ом_ОписаниеТипов().Создать("Число", 10, 0);
	
	Для Каждого Элемент Из Правила["responses"] Цикл
		Если Элемент.Ключ <> "default" Тогда
			Значение	= Числа.ПривестиЗначение(Элемент.Ключ);
			Если Значение = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Спецификация содержит неверный код "
				+ "ответа [" + Элемент.Ключ + "] (" + Элемент.Значение + ")'");
			КонецЕсли;
			Результат.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции // ОтветКоды 

#КонецОбласти

// BSLLS:CommonModuleInvalidType-on
