// @strict-types
#Область ПрограммныйИнтерфейс

// Генерировать текст модуля обработчика.
// 
// Параметры:
//  Спецификация - См. оас_Спецификация_1.OpenAPIObject
//  ИмяПути - Строка
//  НаименованиеМетода - Строка
// 
// Возвращаемое значение:
//  Строка - Генерировать текст модуля обработчика
Функция ГенерироватьТекстМодуляОбработчика(Спецификация, ИмяПути, НаименованиеМетода) Экспорт
	Пути = ?(Спецификация.paths <> Неопределено, Спецификация.paths, ИсключениеНеСуществуетСвойство("paths")); // см. оас_Спецификация_1.PathsObject
	Путь = ?(Пути.Получить(ИмяПути) <> Неопределено, Пути.Получить(ИмяПути), ИсключениеНеСуществуетСвойство("paths."
		+ ИмяПути)); // см. оас_Спецификация_1.PathItemObject
	Операция = ?(Путь[НаименованиеМетода] <> Неопределено, Путь[НаименованиеМетода], ИсключениеНеСуществуетСвойство(
		"paths." + ИмяПути + "." + НаименованиеМетода)); // см. оас_Спецификация_1.OperationObject
	Ответы = ?(Операция.responses <> Неопределено, Операция.responses, ИсключениеНеСуществуетСвойство("paths."
		+ ИмяПути + "." + НаименованиеМетода + ".responses")); // см. оас_Спецификация_1.ResponsesObject

	ОпределениеПараметров = оас_Шаблон_Параметры.ГенерироватьОпределениеПараметровОперации(Путь, Операция);

	ОпределениеОтветов = оас_Ответ.ГенерироватьФункцииОтветов(Ответы);

	ФункцииОпределений = ОпределениеПараметров.ТекстФункцииОпределений + Символы.ПС + Символы.ПС
		+ ОпределениеОтветов.ТекстФункцийОпределений;

	ТекстФункцииОбработчика = ШаблонФункцииОбработчика();
	ТекстМодуляОбработчика = ШаблонМодуляОбработчика();
	ТекстМодуляОбработчика = СтрЗаменить(ТекстМодуляОбработчика, "{ФункцияОбработчика}", ТекстФункцииОбработчика);
	ТекстМодуляОбработчика = СтрЗаменить(ТекстМодуляОбработчика, "{ФункцияПараметров}", ОпределениеПараметров.ТекстФункцииПараметров);
	ТекстМодуляОбработчика = СтрЗаменить(ТекстМодуляОбработчика, "{ФункцииОтветов}", ОпределениеОтветов.ТекстФункцийОтветов);
	ТекстМодуляОбработчика = СтрЗаменить(ТекстМодуляОбработчика, "{ФункцииОпределений}", ФункцииОпределений);

	Возврат ТекстМодуляОбработчика;
КонецФункции

// Шаблон модуля обработчика.
// 
// Возвращаемое значение:
//  Строка
Функция ШаблонМодуляОбработчика() Экспорт
	Результат =
	"// @strict-types
	|#Если Сервер Тогда
	|
	|#Область ПрограммныйИнтерфейс
	|
	|{ФункцияОбработчика}
	|
	|#КонецОбласти
	|
	|#Область СлужебныеПроцедурыИФункции
	|
	|{ФункцияПараметров}
	|
	|#Область Ответы
	|
	|{ФункцииОтветов}
	|
	|#КонецОбласти
	|
	|#Область Определения
	|
	|{ФункцииОпределений}
	|
	|#КонецОбласти
	|
	|#КонецОбласти
	|
	|#КонецЕсли";
	Возврат Результат;
КонецФункции

// Шаблон функции обработчика.
// 
// Возвращаемое значение:
//  Строка
Функция ШаблонФункцииОбработчика() Экспорт
	Таб = Символы.Таб;
	Результат =
	"// Обработчик.
	|// 
	|// Параметры:
	|//{Таб}Контекст - Структура
	|// 
	|// Возвращаемое значение:
	|//{Таб}HTTPСервисОтвет
	|Функция Обработчик(Контекст) Экспорт
	|{Таб}Параметры = Параметры(оас_Контекст.Параметры(Контекст));
	|КонецФункции";
	Результат = СтрЗаменить(Результат, "{Таб}", Таб);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Исключение не существует свойство.
// 
// Параметры:
//  Свойство - Строка
// 
// Возвращаемое значение:
//  Неопределено - Исключение не существует свойство
Функция ИсключениеНеСуществуетСвойство(Свойство)
	ВызватьИсключение "Не удалось сгенерировать текст - свойство """ + Свойство + """не существует";
	//@skip-check bsl-legacy-check-method-for-statements-after-return
	Возврат Неопределено;
КонецФункции

#КонецОбласти